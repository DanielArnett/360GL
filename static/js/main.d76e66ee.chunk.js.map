{"version":3,"sources":["ProjectionComponent.js","App.js","serviceWorker.js","index.js"],"names":["shaders","Shaders","create","Reproject","frag","GLSL","_templateObject","ProjectionComponent","_this$props","this","props","pitch","roll","yaw","inputProjection","fovIn","fovOut","x","y","z","correction1","correction2","correction3","correction4","cropTop","cropBottom","cropLeft","cropRight","xCenter","yCenter","outputProjection","gridLines","sourceImage","width","height","test","react_default","a","createElement","gl_react_dom_lib","lib","shader","uniforms","InputTexture","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pictures","name","uploadedImage","url","handleChange","event","setState","defineProperty","target","value","handleUrlChange","handlePitchChange","handleRollChange","handleYawChange","handleFovInChange","handleFovOutChange","handleCorrection1Change","handleCorrection2Change","handleCorrection3Change","handleCorrection4Change","handleXChange","handleYChange","handleZChange","handleSliderChange","handleCropTopChange","handleCropBottomChange","handleCropLeftChange","handleCropRightChange","handleXCenterChange","handleYCenterChange","handleTestChange","onDrop","bind","assertThisInitialized","alert","preventDefault","picture","length","_this$state","className","TextField_default","id","label","TextField","onChange","margin","variant","Select_default","inputProps","MenuItem_default","displayEmpty","toFixed","Slider_default","src_ProjectionComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d76e66ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Shaders, Node, GLSL } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\n\nconst shaders = Shaders.create({\n  Reproject: {\n    frag: GLSL`\n    // TODO turn this into its own .frag file.\n      precision highp float;\n      float PI = 3.14159265359;\n      vec2 SET_TO_TRANSPARENT = vec2(-1.0, -1.0);\n      vec4 TRANSPARENT_PIXEL = vec4(0.0, 0.0, 0.0, 0.0);\n      bool FISHEYE_RADIAL_CORRECTION = true;\n      uniform float correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter;\n      uniform sampler2D InputTexture;\n      uniform float pitch, roll, yaw, fovIn, fovOut, x, y, z;\n      uniform int inputProjection, outputProjection, gridLines, width, height;\n      uniform float test;\n      varying vec2 uv;\n      bool isTransparent = false; // A global flag indicating if the pixel should just set to transparent and return immediately. \n      const int EQUI = 0;\n      const int FISHEYE = 1;\n      const int FLAT = 2;\n      const int CUBEMAP = 3;\n      const int GRIDLINES_OFF = 0;\n      const int GRIDLINES_ON = 1;\n\n      // uniform vec3 InputRotation;\n      // A transformation matrix rotating about the x axis by th degrees.\n      mat3 Rx(float th)\n      {\n          return mat3(1, 0, 0,\n                      0, cos(th), -sin(th),\n                      0, sin(th), cos(th));\n      }\n      // A transformation matrix rotating about the y axis by th degrees.\n      mat3 Ry(float th)\n      {\n          return mat3(cos(th), 0, sin(th),\n                         0,    1,    0,\n                      -sin(th), 0, cos(th));\n      }\n      // A transformation matrix rotating about the z axis by th degrees.\n      mat3 Rz(float th)\n      {\n          return mat3(cos(th), -sin(th), 0,\n                      sin(th),  cos(th), 0,\n                        0,         0   , 1);\n      }\n\n      // Rotate a point vector by th.x then th.y then th.z, and return the rotated point.\n      vec3 rotatePoint(vec3 p, vec3 th)\n      {\n        return Rx(th.x) * Ry(th.y) * Rz(th.z) * p;\n      }\n\n      // Convert a 3D point on the unit sphere into latitude and longitude.\n      // In more mathy terms we're converting from \"Cartesian Coordinates\" to \"Spherical Coordinates\"\n      vec2 pointToLatLon(vec3 point)\n      {\n        float r = distance(vec3(0.0, 0.0, 0.0), point);\n        vec2 latLon;\n        latLon.x = asin(point.z / r);\n        latLon.y = atan(point.x, point.y);\n        return latLon;\n      }\n\n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      // In more mathy terms we're converting from  \"Spherical Coordinates\" to \"Cartesian Coordinates\"\n      vec3 latLonToPoint(vec2 latLon)\n      {\n          float lat = latLon.x;\n          float lon = latLon.y;\n          vec3 point;\n          point.x = cos(lat) * sin(lon);\n          point.y = cos(lat) * cos(lon);\n          point.z = sin(lat);\n          return point;\n      }\n\n      // Convert pixel coordinates from an Equirectangular image into latitude/longitude coordinates.\n      vec2 equiUvToLatLon(vec2 local_uv)\n      {\n          return vec2(local_uv.y * PI - PI/2.0,\n                      local_uv.x * 2.0*PI - PI);\n      }\n\n      // Convert  pixel coordinates from an Fisheye image into latitude/longitude coordinates.\n      vec2 fisheyeUvToLatLon(vec2 local_uv, float fovOutput)\n      {\n        vec2 pos = 2.0 * local_uv - 1.0;\n        // The distance from the source pixel to the center of the image\n        float r = distance(vec2(0.0,0.0),pos.xy);\n        // Don't bother with pixels outside of the fisheye circle\n        if (1.0 < r) {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        float theta = atan(r,1.0);\n        // phi is the angle of r on the unit circle. See polar coordinates for more details\n        float phi = atan(pos.x,-pos.y);\n        r = tan(theta/fovOutput);\n        vec2 latLon;\n        latLon.x = (1.0 - r)*PI/2.0;\n        // Calculate longitude\n        latLon.y = PI + atan(-pos.x, pos.y);\n          \n        if (latLon.y < 0.0) {\n          latLon.y += 2.0*PI;\n        }\n        vec3 point = latLonToPoint(latLon);\n        point = rotatePoint(point, vec3(PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        return latLon;\n      }\n\n      // Convert a cubemap uv to a 3d point on a unit cube\n      vec3 cubemapUvToPoint(vec2 local_uv)\n      {\n        float verticalBoundary = 0.5;\n        float leftBoundary  = 1.0/3.0;\n        float rightBoundary = 2.0/3.0;\n        // Position of the source pixel in uv coordinates in the range [-1,1]\n        vec2 pos = (2.0 * local_uv) - 1.0;\n        vec3 point;\n        float faceDistance = fovOut / 3.0;\n        // Remove overlap in the image.\n        float verticalCorrection = 2.0/3.0;\n        // The faces of the cubemap. To explain I'll define the following:\n        // Let's call +X: \"Right\"\n        //            -X: \"Left\"\n        //            +Y: \"Forward\"\n        //            -Y: \"Back\"\n        //            +Z: \"Up\"\n        //            -Z: \"Down\"\n        // Top left face in output image\n        if (local_uv.x <= leftBoundary && verticalBoundary <= local_uv.y) {\n          pos += vec2(2.0/3.0, -0.5);\n          // \"Left\" face of cube\n          point = vec3(-faceDistance, pos.x, verticalCorrection*pos.y);\n        }\n        // Top Middle Face in output image\n        if (leftBoundary < local_uv.x && local_uv.x <= rightBoundary && verticalBoundary <= local_uv.y) {\n          pos += vec2(0.0, -0.5);\n          // \"Front\" face of cube \n          point = vec3(pos.x, faceDistance, verticalCorrection*pos.y);\n        }\n        // Top Right Face in output image\n        if (rightBoundary < local_uv.x && verticalBoundary <= local_uv.y) {\n          pos += vec2(-2.0/3.0, -0.5);\n          // \"Right\" face of cube\n          point = vec3(faceDistance, -pos.x, verticalCorrection*pos.y);\n\n        }\n        // Bottom left face in output image\n        if (local_uv.x <= leftBoundary && local_uv.y < verticalBoundary) {\n          pos += vec2(2.0/3.0, 0.5);\n          // \"Top\" face of cube\n          point = vec3(-pos.y*verticalCorrection, -pos.x, faceDistance);\n\n        }\n        // Bottom Middle Face in output image\n        if (leftBoundary < local_uv.x && local_uv.x <= rightBoundary * 2.0 && local_uv.y < verticalBoundary) {\n          pos += vec2(0.0, 0.5);\n          // \"Back\" face of cube\n          point = vec3(-pos.y*verticalCorrection, -faceDistance, -pos.x);\n\n        }\n        // Bottom Right Face in output image\n        if (rightBoundary < local_uv.x && local_uv.y < verticalBoundary) {\n          pos += vec2(-2.0/3.0, 0.0);\n          // \"Bottom\" face of cube\n          point = vec3(-pos.y*verticalCorrection, pos.x, -faceDistance);\n\n        }\n        return point;\n      }\n      // Convert a cubemap image to Latitude/Longitude Points\n      vec2 cubemapUvToLatLon(vec2 local_uv)\n      {\n        return pointToLatLon(cubemapUvToPoint(local_uv));\n      }\n      \n      vec2 flatImageUvToLatLon(vec2 local_uv, float fovOutput)\n      {\n        // Position of the source pixel in uv coordinates in the range [-1,1]\n        vec2 pos = 2.0 * local_uv - 1.0;\n        float aspectRatio = float(width)/float(height);\n        vec3 point = vec3(pos.x*aspectRatio, 1.0/fovOutput, pos.y);\n        return pointToLatLon(point);\n      }\n\n\n      \n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      vec3 flatLatLonToPoint(vec2 latLon)\n      {\n        vec3 point = latLonToPoint(latLon);\n        // Get phi of this point, see polar coordinate system for more details.\n        float phi = atan(point.x, -point.y);\n        // With phi, calculate the point on the image plane that is also at the angle phi\n        point.x = sin(phi) * tan(PI / 2.0 - latLon.x);\n        point.y = cos(phi) * tan(PI / 2.0 - latLon.x);\n        point.z = 1.0;\n        return point;\n      }\n      // Convert latitude, longitude to x, y pixel coordinates on an equirectangular image.\n      vec2 latLonToEquiUv(vec2 latLon)\n      {\n          vec2 local_uv;\n          local_uv.x = (latLon.y + PI)/(2.0*PI);\n          local_uv.y = (latLon.x + PI/2.0)/PI;\n\n          // Set to transparent if out of bounds\n          if (local_uv.x < -1.0 || local_uv.y < -1.0 || local_uv.x > 1.0 || local_uv.y > 1.0) {\n            // Return a isTransparent pixel\n            isTransparent = true;\n            return SET_TO_TRANSPARENT;\n          }\n          return local_uv;\n      }\n      \n      // Convert latitude, longitude to x, y pixel coordinates on the source fisheye image.\n      vec2 pointToFisheyeUv(vec3 point, float fovInput, vec4 fishCorrect)\n      {\t\n        point = rotatePoint(point, vec3(-PI/2.0, 0.0, 0.0));\n        // Phi and theta are flipped depending on where you read about them.\n        float theta = atan(distance(vec2(0.0,0.0),point.xy),point.z);\n        // The distance from the source pixel to the center of the image\n        float r = (2.0/PI)*(theta/fovInput);\n        if (FISHEYE_RADIAL_CORRECTION)\n        {\n          // Do radial correction. \n          // Source: http://paulbourke.net/dome/fisheyecorrect/\n          r *= 2.0 * (fishCorrect.x + theta * (fishCorrect.y + theta * (fishCorrect.z + theta * fishCorrect.w)));\n        }\n\n        // phi is the angle of r on the unit circle. See polar coordinates for more details\n        float phi = atan(-point.y, point.x);\n        // Get the position of the source pixel\n        vec2 sourcePixel;\n        sourcePixel.x = r * cos(phi);\n        sourcePixel.y = r * sin(phi);\n        // Normalize the output pixel to be in the range [0,1]\n        sourcePixel += 1.0;\n        sourcePixel /= 2.0;\n        // Don't bother with source pixels outside of the fisheye circle\n        if (1.0 < r || sourcePixel.x < 0.0 || sourcePixel.y < 0.0 || sourcePixel.x > 1.0 || sourcePixel.y > 1.0) {\n          // Return a isTransparent pixel\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return sourcePixel;\n      }\n      \n      bool outOfFlatBounds(vec2 xy, float lower, float upper)\n      {\n        vec2 lowerBound = vec2(lower, lower);\n        vec2 upperBound = vec2(upper, upper);\n        return (any(lessThan(xy, lowerBound)) || any(greaterThan(xy, upperBound)));\n      }\n\n\n      vec2 latLonToFlatUv(vec2 latLon, float fovInput)\n      {\n        vec3 point = rotatePoint(latLonToPoint(latLon), vec3(-PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        float aspectRatio = float(width)/float(height);\n\n        vec2 xyOnImagePlane;\n        vec3 p;\n        if (latLon.x < 0.0) \n        {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        // Derive a 3D point on the plane which correlates with the latitude and longitude in the fisheye image.\n        p = flatLatLonToPoint(latLon);\n        p.x /= aspectRatio;\n        // Control the scale with the user's fov input parameter.\n        p.xy *= fovInput;\n        // Position of the source pixel in the source image in the range [-1,1]\n        xyOnImagePlane = p.xy / 2.0 + 0.5;\n        if (outOfFlatBounds(xyOnImagePlane, 0.0, 1.0)) \n    \t\t{\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return xyOnImagePlane;\n      }\n\n\n      void main()\n      {\n        // Display fisheye gridlines if they're turned on\n        if (gridLines == GRIDLINES_ON && outputProjection == FISHEYE)\n        {\n          vec2 gridlineUv = uv;\n          gridlineUv.x = (gridlineUv.x * float(width) / float(height)) - 0.5;\n          if (abs(distance(vec2(0.0, 0.0), 2.0 * gridlineUv - 1.0) - 1.0) < 0.01)\n          {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n            return;\n          }\n        }\n        vec3 InputRotation = vec3(pitch, roll, yaw);\n        vec4 fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        vec4 centerFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        float fovInput = fovIn;\n        float fovOutput = fovOut;\n        vec4 fishCorrect = vec4(correction1-0.5, correction2, correction3, correction4);\n        fishCorrect.yzw -= 1.0;\n        float lineCount = 0.0;\n        // Level Of Detail: how fast should this run?\n        // Set LOD to 0 to run fast, set to 2 to blur the image, reducing jagged edges\n        const int LOD = 1;\n        //TODO Make Antialiasing a little smarter than this.\n        for(int i = -LOD; i <= LOD; i++)\n        {\n          for(int j = -LOD; j <= LOD; j++)\n          {\n            isTransparent = false;\n            vec2 uv_aa = uv + vec2(i, j)/vec2(width, height);\n\n            // Given some pixel (uv), find the latitude and longitude of that pixel\n            vec2 latLon;\n            if (outputProjection == EQUI)\n              latLon = equiUvToLatLon(uv_aa);\n            else if(outputProjection == FISHEYE)\n            {\n              uv_aa.x = (uv_aa.x * float(width) / float(height)) - 0.5;\n              latLon = fisheyeUvToLatLon(uv_aa, fovOutput);\n            }\n            else if (outputProjection == FLAT)\n              latLon = flatImageUvToLatLon(uv_aa, fovOutput);\n            else if (outputProjection == CUBEMAP)\n              latLon = cubemapUvToLatLon(uv_aa);\n            // If a pixel is out of bounds, set it to be transparent\n            if (isTransparent)\n            {\n              continue;\n            }\n            // Create a point on the unit-sphere from the calculated latitude and longitude\n            // This sphere uses a right-handed coordinate system\n              // X increases from left to right [-1 to 1]\n              // Y increases from back to front [-1 to 1]\n              // Z increases from bottom to top [-1 to 1]\n            vec3 point = latLonToPoint(latLon);\n            // X, Y, Z translation inputs from the user.\n            vec3 translation = 5.0*(vec3(x, y, z) - 1.0); \n            // Rotate the point based on the user input in radians\n            point.xyz += translation;\n            point = rotatePoint(point, InputRotation.rgb * PI);\n            if (distance(vec3(0.0, 0.0, 0.0), translation) > 1.0 && distance(vec3(0.0, 0.0, 0.0), point) > distance(vec3(0.0, 0.0, 0.0), translation))\n            {\n              isTransparent = true;\n              continue;\n            }\n            // Convert back to latitude and longitude\n            latLon = pointToLatLon(point);\n            // if (1.0 < distance(point, vec3(0.0, 0.0, 0.0)))\n            // {\n            //   // isTransparent == true;\n            //   gl_FragColor = vec4(latLon.x, latLon.y, 0.0, 1.0);\n            //   return;\n            // }\n            // Convert back to the normalized pixel coordinate\n            vec2 sourcePixel;\n            if (inputProjection == EQUI)\n              sourcePixel = latLonToEquiUv(latLon);\n            else if (inputProjection == FISHEYE)\n              sourcePixel = pointToFisheyeUv(point, fovInput, fishCorrect);\n            else if (inputProjection == FLAT)\n              sourcePixel = latLonToFlatUv(latLon, fovInput);\n\n            vec2 croppedUv = 2.0*sourcePixel-1.0;\n            float croppedWidth = cropRight - (cropLeft - 1.0);\n            float croppedHeight = cropTop - (cropBottom - 1.0);\n            // gl_FragColor = vec4(croppedWidth, 0.0, 0.0, 1.0);\n            // return;\n            croppedUv = vec2(croppedUv.x / cropRight, croppedUv.y / cropTop);\n            //float newWidth = float(width) / (croppedWidth + 1.0);\n            //float newHeight = float(newWidth) / float(height) ;\n            //croppedUv.y /= newHeight;\n            croppedUv = 0.5*croppedUv+0.5;\n            croppedUv.x += xCenter - 1.0;\n            croppedUv.y += yCenter - 1.0;\n            if (croppedUv.x < 0.0  || croppedUv.y < 0.0 || 1.0 < croppedUv.x || 1.0 < croppedUv.y)\n            {\n              continue;\n              // gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n              // return;\n            }\n            // If a pixel is out of bounds, set it to be transparent\n            else if (isTransparent)\n            {\n              continue;\n            }\n            // Set the color of the destination pixel to the color of the source pixel\n            vec4 color = texture2D(InputTexture, croppedUv);\n\n            if (inputProjection == EQUI && gridLines == GRIDLINES_ON)\n            {\n              float minDistance = 0.3;\n              float lineThickness = minDistance;\n              for (float i = -18.0; i <= 18.0; i += 1.0)\n              {\n                float distanceToLine = abs(degrees(latLon.y) - i*10.0);\n                if (distanceToLine <= minDistance)\n                  minDistance = distanceToLine;\n                distanceToLine = abs(degrees(latLon.x) - i*10.0);\n                if (distanceToLine <= minDistance)\n                  minDistance = distanceToLine;\n              }\n              if (minDistance < lineThickness)\n              {\n                color = vec4(0.0, 0.0, 0.0, 1.0);\n                lineCount += 1.0;\n              }\n            }\n            fragColor += color;\n            if (i == 0 && j == 0)\n            {\n              // This is the aliased pixel. If we didn't do antialiasing this is the pixel we'd get.\n              centerFragColor = color;\n            }\n          }\n        }\n        // antiAliasCount: how many pixels the above loop should have calculated\n        float antiAliasCount = float((1+2*LOD)*(1+2*LOD));\n        // If the pixel has any transparency (i.e. the sourcePixel is at the perimeter of the image) then do antialiasing\n        if (fragColor.a < antiAliasCount || lineCount > 0.0)\n        {\n          // Apply antialiasing. Remove the if/else statement if you want to antialias the whole image.\n          gl_FragColor = fragColor / antiAliasCount;\n          \n        }\n        else\n        {\n          // Ignore antialiasing\n          gl_FragColor = centerFragColor;\n        }\n      }\n\n    `\n  }\n});\n\nclass ProjectionComponent extends Component {\n  render() {\n    const { pitch, roll, yaw, inputProjection, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter, outputProjection, gridLines, width, height, sourceImage, test } = this.props\n    return (\n      <Surface width={1400} height={700}>\n        <Node\n          shader={shaders.Reproject}\n          uniforms={{ pitch, roll, yaw, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter, inputProjection, outputProjection, gridLines, width:1400, height:700, InputTexture: sourceImage, test }}\n        />\n      </Surface>\n    )\n  }\n}\n\nexport default ProjectionComponent;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/lab/Slider';\nimport './App.css'\nimport ProjectionComponent from './ProjectionComponent'\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ImageUploader from 'react-images-upload';\n \nclass App extends Component {\n  state = {\n    pitch: 1,\n    roll: 1,\n    yaw: 1,\n    fovIn: 1,\n    fovOut: 1,\n    x: 1,\n    y: 1,\n    z: 1,\n    correction1: 1,\n    correction2: 1, \n    correction3: 1,\n    correction4: 1, \n    cropTop: 1,\n    cropBottom: 1,\n    cropLeft: 1,\n    cropRight: 1,\n    xCenter: 1,\n    yCenter: 1,\n    inputProjection: 0,\n    outputProjection: 0,\n    gridLines: 0,\n    pictures: [],\n    sourceImage: \"earth.jpg\", \n    name: \"\",\n    uploadedImage: \"\",\n    test: 1,\n    url: \"\",\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handleUrlChange = event => {\n    this.setState({ url: event.target.value });\n  };\n  handlePitchChange = (event, value) => {\n    this.setState({ pitch: value/50 });\n  }\n\n  handleRollChange = (event, value) => {\n    this.setState({ roll: value/50 });\n  }\n\n  handleYawChange = (event, value) => {\n    this.setState({ yaw: value/50 });\n  }\n  handleFovInChange = (event, value) => {\n    this.setState({ fovIn: value/50 });\n  }\n\n  handleFovOutChange = (event, value) => {\n    this.setState({ fovOut: value/50 });\n  }\n  handleCorrection1Change = (event, value) => {\n    this.setState({ correction1: value/50 });\n  }\n  handleCorrection2Change = (event, value) => {\n    this.setState({ correction2: value/50 });\n  }\n  handleCorrection3Change = (event, value) => {\n    this.setState({ correction3: value/50 });\n  }\n  handleCorrection4Change = (event, value) => {\n    this.setState({ correction4: value/50 });\n  }\n  handleXChange = (event, value) => {\n    this.setState({ x: value/50 });\n  }\n  handleYChange = (event, value) => {\n    this.setState({ y: value/50 });\n  }\n  handleZChange = (event, value) => {\n    this.setState({ z: value/50 });\n  }\n  handleSliderChange = (event, value) => {\n    this.setState({ [event.target.name]: event.target.value/50 });\n  }\n  handleCropTopChange = (event, value) => {\n    this.setState({ cropTop: value/50,\n                    cropBottom: 2.0 - value/50 });\n  }\n  handleCropBottomChange = (event, value) => {\n    this.setState({ cropBottom: value/50,\n                    cropTop: 2.0 - value/50 });\n  }\n  handleCropLeftChange = (event, value) => {\n    this.setState({ cropLeft: value/50, \n                    cropRight: 2.0 - value/50});\n  }\n  handleCropRightChange = (event, value) => {\n    this.setState({ cropRight: value/50,\n                    cropLeft: 2.0 - value/50 });\n  }\n  handleXCenterChange = (event, value) => {\n    this.setState({ xCenter: value/50 });\n  }\n  handleYCenterChange = (event, value) => {\n    this.setState({ yCenter: value/50 });\n  }\n  handleTestChange = (event, value) => {\n    this.setState({ test: value/50 });\n  }\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.url);\n    event.preventDefault();\n  }\n  constructor(props) {\n      super(props);\n        this.onDrop = this.onDrop.bind(this);\n  }\n  onDrop(picture) {\n      this.setState({\n          pictures: picture,\n          uploadedImage: picture[picture.length-1].name,\n          sourceImage: picture[picture.length-1].name,\n          \n      });\n  }\n  render() {\n    const { pitch, roll, yaw, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter, inputProjection, outputProjection, gridLines, sourceImage, url, test } = this.state\n    return (\n      <div className='App-container'>\n      <div className='App-slider'>\n      <TextField\n        id=\"outlined-name\"\n        label=\"URL\"\n        className={TextField}\n        value={this.state.url}\n        onChange={this.handleUrlChange}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n        {/*<div className='App-Options'>\n          <ImageUploader\n              withIcon={true}\n              buttonText='Choose image'\n              onChange={this.onDrop}\n              imgExtension={['.jpg', '.gif', '.png', '.gif']}\n              maxFileSize={5242880}\n              singleImage={true}\n              withPreview={false}\n          />\n        </div>*/}\n        <div className='App-Options'>\n          <p>Source Image</p>\n            <Select\n              value={this.state.sourceImage}\n              onChange={this.handleChange}\n              inputProps={{\n                name: 'sourceImage',\n                id: 'sourceImage',\n              }}\n            >\n              <MenuItem value={\"earth.jpg\"}>Earth</MenuItem>\n              <MenuItem value={\"sru.jpg\"}>Rectilinear Photo</MenuItem>\n              <MenuItem value={\"radial.jpg\"}>Fisheye Grid</MenuItem>\n              <MenuItem value={\"360planetarium.jpg\"}>360 Photo</MenuItem>\n              <MenuItem value={this.state.url}>URL</MenuItem>\n            </Select>\n        </div>\n        \n        <div className='App-Options'>\n          <p>Input Projection</p>\n          <Select\n            value={this.state.inputProjection}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'inputProjection',\n              id: 'inputProjection',\n            }}\n            displayEmpty\n          >\n            <MenuItem value={0}>Equirectangular</MenuItem>\n            <MenuItem value={1}>Fisheye</MenuItem>\n            <MenuItem value={2}>Rectilinear</MenuItem>\n          </Select>\n        </div>\n        \n        <div className='App-Options'>\n          <p>Output Projection</p>\n          <Select\n            value={this.state.outputProjection}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'outputProjection',\n              id: 'outputProjection',\n            }}\n          >\n            <MenuItem value={0}>Equirectangular</MenuItem>\n            <MenuItem value={1}>Fisheye</MenuItem>\n            <MenuItem value={2}>Rectilinear</MenuItem>\n            <MenuItem value={3}>CubeMap</MenuItem>\n          </Select>\n        \n        </div>\n        <div className='App-Options'>\n          <p>Grid Lines</p>\n          <Select\n            value={this.state.gridLines}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'gridLines',\n              id: 'gridLines',\n            }}\n          >\n            <MenuItem value={0}>Off</MenuItem>\n            <MenuItem value={1}>On</MenuItem>\n          </Select>\n        </div>\n        <div className='App-Options'>\n            <p>Pitch: {((this.state.pitch - 1.0) * 180.0).toFixed(1)} degrees</p>\n            <Slider\n              value={pitch*50}\n              onChange={this.handlePitchChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Roll: {((this.state.roll - 1.0) * 180.0).toFixed(1)} degrees</p>\n            <Slider\n              value={roll*50}\n              onChange={this.handleRollChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Yaw: {((this.state.yaw - 1.0) * 180.0).toFixed(1)} degrees</p>\n            <Slider\n              value={yaw*50}\n              onChange={this.handleYawChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Field of View In: {(180.0*this.state.fovIn).toFixed(1)} degrees</p>\n            <Slider\n              value={fovIn*50}\n              onChange={this.handleFovInChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Field of View Out: {(this.state.fovOut).toFixed(2)}</p>\n            <Slider\n              value={fovOut*50}\n              onChange={this.handleFovOutChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>X: {((this.state.x-1.0)*5.0).toFixed(1)} meters</p>\n            <Slider\n              value={x*50}\n              onChange={this.handleXChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Y: {((this.state.y-1.0)*5.0).toFixed(1)} meters</p>\n            <Slider\n              value={y*50}\n              onChange={this.handleYChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Z: {((this.state.z-1.0)*5.0).toFixed(1)} meters</p>\n            <Slider\n              value={z*50}\n              onChange={this.handleZChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Top: {((this.state.cropTop-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropTop*50}\n              onChange={this.handleCropTopChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Bottom: {((this.state.cropBottom-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropBottom*50}\n              onChange={this.handleCropBottomChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Left  {((this.state.cropLeft-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropLeft*50}\n              onChange={this.handleCropLeftChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Right {((this.state.cropRight-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropRight*50}\n              onChange={this.handleCropRightChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>X Center : {((this.state.xCenter-1.0)*1400.0/2.0).toFixed(0)} pixels</p>\n            <Slider\n              value={xCenter*50}\n              onChange={this.handleXCenterChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Y Center : {((this.state.yCenter-1.0)*1400.0/2.0).toFixed(0)} pixels</p>\n            <Slider\n              value={yCenter*50}\n              onChange={this.handleYCenterChange}\n            />\n        </div>\n        <div className='App-Options'>\n            <p>Fisheye Correction 1: {(this.state.correction1 - 0.5).toFixed(4)} r</p>\n            <Slider\n              value={correction1*50}\n              onChange={this.handleCorrection1Change}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Fisheye Correction 2: {(this.state.correction2 - 1).toFixed(4)} r^2</p>\n            <Slider\n              value={correction2*50}\n              onChange={this.handleCorrection2Change}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Fisheye Correction 3: {(this.state.correction3 - 1).toFixed(4)} r^3</p>\n            <Slider\n              value={correction3*50}\n              onChange={this.handleCorrection3Change}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Fisheye Correction 4: {(this.state.correction4 - 1).toFixed(4)} r^4</p>\n            <Slider\n              value={correction4*50}\n              onChange={this.handleCorrection4Change}\n            />\n        </div>\n        {/*<div className='App-Options'>\n            <p>Test: {this.state.test}</p>\n            <Slider\n              value={test*50}\n              onChange={this.handleTestChange}\n            />\n        </div>*/}\n        </div>\n        <div className='App-Projection'>\n          <ProjectionComponent pitch={pitch} roll={roll} yaw={yaw} fovIn={fovIn} fovOut={fovOut} x={x} y={y} z={z} xCenter={xCenter} yCenter={yCenter} correction1={correction1} correction2={correction2} correction3={correction3} correction4={correction4} cropTop={cropTop} cropBottom={cropBottom} cropLeft={cropLeft} cropRight={cropRight}  inputProjection={inputProjection} outputProjection={outputProjection} gridLines={gridLines} sourceImage={sourceImage} test={test}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}