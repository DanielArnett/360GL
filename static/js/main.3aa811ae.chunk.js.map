{"version":3,"sources":["ProjectionComponent.js","App.js","serviceWorker.js","index.js"],"names":["shaders","Shaders","create","Reproject","frag","GLSL","_templateObject","ProjectionComponent","_this$props","this","props","pitch","roll","yaw","inputProjection","fovIn","fovOut","x","y","z","correction1","correction2","correction3","correction4","cropTop","cropBottom","cropLeft","cropRight","xCenter","outputProjection","gridLines","sourceImage","width","height","react_default","a","createElement","gl_react_dom_lib","lib","shader","uniforms","InputTexture","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pictures","name","uploadedImage","handleProjectionChange","event","value","setState","handleChange","defineProperty","target","handlePitchChange","handleRollChange","handleYawChange","handleFovInChange","handleFovOutChange","handleCorrection1Change","handleCorrection2Change","handleCorrection3Change","handleCorrection4Change","handleXChange","handleYChange","handleZChange","handleSliderChange","handleCropTopChange","handleCropBottomChange","handleCropLeftChange","handleCropRightChange","handleXCenterChange","onDrop","bind","assertThisInitialized","picture","length","_this$state","className","compiled_default","withIcon","buttonText","onChange","imgExtension","maxFileSize","singleImage","withPreview","InputLabel_default","htmlFor","Select_default","inputProps","id","MenuItem_default","shrink","displayEmpty","Slider_default","src_ProjectionComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k3dAIA,IAAMA,EAAUC,UAAQC,OAAO,CAC7BC,UAAW,CACTC,KAAMC,eAAFC,QAiYOC,mLAbJ,IAAAC,EAC+NC,KAAKC,MAAnOC,EADDH,EACCG,MAAOC,EADRJ,EACQI,KAAMC,EADdL,EACcK,IAAKC,EADnBN,EACmBM,gBAAiBC,EADpCP,EACoCO,MAAOC,EAD3CR,EAC2CQ,OAAQC,EADnDT,EACmDS,EAAGC,EADtDV,EACsDU,EAAGC,EADzDX,EACyDW,EAAGC,EAD5DZ,EAC4DY,YAAaC,EADzEb,EACyEa,YAAaC,EADtFd,EACsFc,YAAaC,EADnGf,EACmGe,YAAaC,EADhHhB,EACgHgB,QAASC,EADzHjB,EACyHiB,WAAYC,EADrIlB,EACqIkB,SAAUC,EAD/InB,EAC+ImB,UAAWC,EAD1JpB,EAC0JoB,QAASC,EADnKrB,EACmKqB,iBAAkBC,EADrLtB,EACqLsB,UAA0BC,GAD/MvB,EACgMwB,MADhMxB,EACuMyB,OADvMzB,EAC+MuB,aACtN,OACEG,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASL,MAAO,KAAMC,OAAQ,KAC5BC,EAAAC,EAAAC,cAACE,EAAA,KAAD,CACEC,OAAQvC,EAAQG,UAChBqC,SAAU,CAAE7B,QAAOC,OAAMC,MAAKE,QAAOC,SAAQC,IAAGC,IAAGC,IAAGC,cAAaC,cAAaC,cAAaC,cAAaC,UAASC,aAAYC,WAAUC,YAAWC,UAASd,kBAAiBe,mBAAkBC,YAAWE,MAAM,KAAMC,OAAO,IAAKQ,aAAcV,aAPzNW,kFC1CnBC,cAvOb,SAAAA,EAAYjC,GAAO,IAAAkC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApC,KAAAkC,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAApC,KAAAoC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxC,KAAMC,KA/FVwC,MAAQ,CACNvC,MAAO,EACPC,KAAM,EACNC,IAAK,EACLE,MAAO,EACPC,OAAQ,EACRC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,YAAa,EACbC,YAAa,EACbC,YAAa,EACbC,YAAa,EACbC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,UAAW,EACXC,QAAS,EACTd,gBAAiB,EACjBe,iBAAkB,EAClBC,UAAW,EACXqB,SAAU,GACVpB,YAAa,YACbqB,KAAM,GACNC,cAAe,IAsEET,EApEnBU,uBAAyB,SAACC,EAAOC,GAC/BZ,EAAKa,SAAS,CAAE3C,gBAAiB0C,KAmEhBZ,EAjEnBc,aAAe,SAAAH,GACbX,EAAKa,SAALZ,OAAAc,EAAA,EAAAd,CAAA,GAAiBU,EAAMK,OAAOR,KAAOG,EAAMK,OAAOJ,SAgEjCZ,EA9DnBiB,kBAAoB,SAACN,EAAOC,GAC1BZ,EAAKa,SAAS,CAAE9C,MAAO6C,EAAM,MA6DZZ,EA1DnBkB,iBAAmB,SAACP,EAAOC,GACzBZ,EAAKa,SAAS,CAAE7C,KAAM4C,EAAM,MAyDXZ,EAtDnBmB,gBAAkB,SAACR,EAAOC,GACxBZ,EAAKa,SAAS,CAAE5C,IAAK2C,EAAM,MAqDVZ,EAnDnBoB,kBAAoB,SAACT,EAAOC,GAC1BZ,EAAKa,SAAS,CAAE1C,MAAOyC,EAAM,MAkDZZ,EA/CnBqB,mBAAqB,SAACV,EAAOC,GAC3BZ,EAAKa,SAAS,CAAEzC,OAAQwC,EAAM,MA8CbZ,EA5CnBsB,wBAA0B,SAACX,EAAOC,GAChCZ,EAAKa,SAAS,CAAErC,YAAaoC,EAAM,MA2ClBZ,EAzCnBuB,wBAA0B,SAACZ,EAAOC,GAChCZ,EAAKa,SAAS,CAAEpC,YAAamC,EAAM,MAwClBZ,EAtCnBwB,wBAA0B,SAACb,EAAOC,GAChCZ,EAAKa,SAAS,CAAEnC,YAAakC,EAAM,MAqClBZ,EAnCnByB,wBAA0B,SAACd,EAAOC,GAChCZ,EAAKa,SAAS,CAAElC,YAAaiC,EAAM,MAkClBZ,EAhCnB0B,cAAgB,SAACf,EAAOC,GACtBZ,EAAKa,SAAS,CAAExC,EAAGuC,EAAM,MA+BRZ,EA7BnB2B,cAAgB,SAAChB,EAAOC,GACtBZ,EAAKa,SAAS,CAAEvC,EAAGsC,EAAM,MA4BRZ,EA1BnB4B,cAAgB,SAACjB,EAAOC,GACtBZ,EAAKa,SAAS,CAAEtC,EAAGqC,EAAM,MAyBRZ,EAvBnB6B,mBAAqB,SAAClB,EAAOC,GAC3BZ,EAAKa,SAALZ,OAAAc,EAAA,EAAAd,CAAA,GAAiBU,EAAMK,OAAOR,KAAOG,EAAMK,OAAOJ,MAAM,MAsBvCZ,EApBnB8B,oBAAsB,SAACnB,EAAOC,GAC5BZ,EAAKa,SAAS,CAAEjC,QAASgC,EAAM,GACf/B,WAAY,EAAM+B,EAAM,MAkBvBZ,EAhBnB+B,uBAAyB,SAACpB,EAAOC,GAC/BZ,EAAKa,SAAS,CAAEhC,WAAY+B,EAAM,GAClBhC,QAAS,EAAMgC,EAAM,MAcpBZ,EAZnBgC,qBAAuB,SAACrB,EAAOC,GAC7BZ,EAAKa,SAAS,CAAE/B,SAAU8B,EAAM,GAChB7B,UAAW,EAAM6B,EAAM,MAUtBZ,EARnBiC,sBAAwB,SAACtB,EAAOC,GAC9BZ,EAAKa,SAAS,CAAE9B,UAAW6B,EAAM,GACjB9B,SAAU,EAAM8B,EAAM,MAMrBZ,EAJnBkC,oBAAsB,SAACvB,EAAOC,GAC5BZ,EAAKa,SAAS,CAAE7B,QAAS4B,EAAM,MAK3BZ,EAAKmC,OAASnC,EAAKmC,OAAOC,KAAZnC,OAAAoC,EAAA,EAAApC,QAAAoC,EAAA,EAAApC,CAAAD,KAFDA,sEAIZsC,GACHzE,KAAKgD,SAAS,CACVN,SAAU+B,EACV7B,cAAe6B,EAAQA,EAAQC,OAAO,GAAG/B,KACzCrB,YAAamD,EAAQA,EAAQC,OAAO,GAAG/B,wCAItC,IAAAgC,EACgN3E,KAAKyC,MAApNvC,EADDyE,EACCzE,MAAOC,EADRwE,EACQxE,KAAMC,EADduE,EACcvE,IAAKE,EADnBqE,EACmBrE,MAAOC,EAD1BoE,EAC0BpE,OAAQC,EADlCmE,EACkCnE,EAAGC,EADrCkE,EACqClE,EAAGC,EADxCiE,EACwCjE,EAAGC,EAD3CgE,EAC2ChE,YAAaC,EADxD+D,EACwD/D,YAAaC,EADrE8D,EACqE9D,YAAaC,EADlF6D,EACkF7D,YAAaC,EAD/F4D,EAC+F5D,QAASC,EADxG2D,EACwG3D,WAAYC,EADpH0D,EACoH1D,SAAUC,EAD9HyD,EAC8HzD,UAAWC,EADzIwD,EACyIxD,QAASd,EADlJsE,EACkJtE,gBAAiBe,EADnKuD,EACmKvD,iBAAkBC,EADrLsD,EACqLtD,UAAWC,EADhMqD,EACgMrD,YACvM,OACEG,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,iBACfnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,cACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACbnD,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,UAAU,EACVC,WAAW,eACXC,SAAUhF,KAAKsE,OACfW,aAAc,CAAC,OAAQ,OAAQ,OAAQ,QACvCC,YAAa,QACbC,aAAa,EACbC,aAAa,KAGnB3D,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACbnD,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAY4D,QAAQ,eAApB,gBACM7D,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACAqB,MAAO/C,KAAKsB,YACZ0D,SAAUhF,KAAKiD,aACfuC,WAAY,CACV7C,KAAM,cACN8C,GAAI,gBAGNhE,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,aAAjB,SACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,gBAAjB,YACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,cAAjB,gBACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,4BAAjB,aACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO/C,KAAKyC,MAAMG,eAAgB5C,KAAKyC,MAAMG,iBAK/DnB,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACbnD,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAYiE,QAAM,EAACL,QAAQ,mBAA3B,oBAGM7D,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACAqB,MAAO/C,KAAKK,gBACZ2E,SAAUhF,KAAKiD,aACfuC,WAAY,CACV7C,KAAM,kBACN8C,GAAI,mBAENG,cAAY,GAEZnE,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,mBACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,WACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,iBAKRtB,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAY4D,QAAQ,oBAApB,qBACE7D,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACAqB,MAAO/C,KAAKoB,iBACZ4D,SAAUhF,KAAKiD,aACfuC,WAAY,CACV7C,KAAM,mBACN8C,GAAI,qBAGNhE,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,mBACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,WACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,eACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,YAINtB,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAY4D,QAAQ,aAApB,cACE7D,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CACAqB,MAAO/C,KAAKqB,UACZ2D,SAAUhF,KAAKiD,aACfuC,WAAY,CACV7C,KAAM,YACN8C,GAAI,cAGNhE,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,OACAtB,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAUqB,MAAO,GAAjB,QAINtB,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAa,GAAN7C,EACP8E,SAAUhF,KAAKoD,qBAIrB3B,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAY,GAAL5C,EACP6E,SAAUhF,KAAKqD,oBAIrB5B,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAW,GAAJ3C,EACP4E,SAAUhF,KAAKsD,mBAIrB7B,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAa,GAANzC,EACP0E,SAAUhF,KAAKuD,qBAIrB9B,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAc,GAAPxC,EACPyE,SAAUhF,KAAKwD,sBAIrB/B,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAS,GAAFvC,EACPwE,SAAUhF,KAAK6D,iBAIrBpC,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAS,GAAFtC,EACPuE,SAAUhF,KAAK8D,iBAIrBrC,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAS,GAAFrC,EACPsE,SAAUhF,KAAK+D,iBAIrBtC,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAe,GAARhC,EACPiE,SAAUhF,KAAKiE,uBAIrBxC,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAkB,GAAX/B,EACPgE,SAAUhF,KAAKkE,0BAIrBzC,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAgB,GAAT9B,EACP+D,SAAUhF,KAAKmE,wBAIrB1C,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAiB,GAAV7B,EACP8D,SAAUhF,KAAKoE,yBAIrB3C,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACXnD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAe,GAAR5B,EACP6D,SAAUhF,KAAKqE,uBAGjB5C,EAAAC,EAAAC,cAAA,kCAA0B3B,KAAKyC,MAAM9B,YAAc,IACnDc,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAmB,GAAZpC,EACPqE,SAAUhF,KAAKyD,0BAEjBhC,EAAAC,EAAAC,cAAA,kCAA0B3B,KAAKyC,MAAM7B,YAAc,GACnDa,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAmB,GAAZnC,EACPoE,SAAUhF,KAAK0D,0BAEjBjC,EAAAC,EAAAC,cAAA,kCAA0B3B,KAAKyC,MAAM5B,YAAc,GACnDY,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAmB,GAAZlC,EACPmE,SAAUhF,KAAK2D,0BAEjBlC,EAAAC,EAAAC,cAAA,kCAA0B3B,KAAKyC,MAAM3B,YAAc,GACnDW,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CACEqB,MAAmB,GAAZjC,EACPkE,SAAUhF,KAAK4D,2BAGrBnC,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,kBACbnD,EAAAC,EAAAC,cAACmE,EAAD,CAAqB5F,MAAOA,EAAOC,KAAMA,EAAMC,IAAKA,EAAKE,MAAOA,EAAOC,OAAQA,EAAQC,EAAGA,EAAGC,EAAGA,EAAGC,EAAGA,EAAGS,QAASA,EAASR,YAAaA,EAAaC,YAAaA,EAAaC,YAAaA,EAAaC,YAAaA,EAAaC,QAASA,EAASC,WAAYA,EAAYC,SAAUA,EAAUC,UAAWA,EAAYb,gBAAiBA,EAAiBe,iBAAkBA,EAAkBC,UAAWA,EAAWC,YAAaA,aA/TzZW,aCGE8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3aa811ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Shaders, Node, GLSL } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\n\nconst shaders = Shaders.create({\n  Reproject: {\n    frag: GLSL`\n    // TODO turn this into its own .frag file.\n      precision highp float;\n      float PI = 3.14159265359;\n      vec2 SET_TO_TRANSPARENT = vec2(-1.0, -1.0);\n      vec4 TRANSPARENT_PIXEL = vec4(0.0, 0.0, 0.0, 0.0);\n      bool FISHEYE_RADIAL_CORRECTION = true;\n      uniform float correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter;\n      uniform sampler2D InputTexture;\n      uniform float pitch, roll, yaw, fovIn, fovOut, x, y, z;\n      uniform int inputProjection, outputProjection, gridLines, width, height;\n      varying vec2 uv;\n      bool isTransparent = false;\n      const int EQUI = 0;\n      const int FISHEYE = 1;\n      const int FLAT = 2;\n      const int SPHERE = 3;\n      const int GRIDLINES_OFF = 0;\n      const int GRIDLINES_ON = 1;\n\n      // uniform vec3 InputRotation;\n      // A transformation matrix rotating about the x axis by th degrees.\n      mat3 Rx(float th)\n      {\n          return mat3(1, 0, 0,\n                      0, cos(th), -sin(th),\n                      0, sin(th), cos(th));\n      }\n      // A transformation matrix rotating about the y axis by th degrees.\n      mat3 Ry(float th)\n      {\n          return mat3(cos(th), 0, sin(th),\n                         0,    1,    0,\n                      -sin(th), 0, cos(th));\n      }\n      // A transformation matrix rotating about the z axis by th degrees.\n      mat3 Rz(float th)\n      {\n          return mat3(cos(th), -sin(th), 0,\n                      sin(th),  cos(th), 0,\n                        0,         0   , 1);\n      }\n\n      // Rotate a point vector by th.x then th.y then th.z, and return the rotated point.\n      vec3 rotatePoint(vec3 p, vec3 th)\n      {\n        return Rx(th.x) * Ry(th.y) * Rz(th.z) * p;\n      }\n\n      // Convert a 3D point on the unit sphere into latitude and longitude.\n      // In more mathy terms we're converting from \"Cartesian Coordinates\" to \"Spherical Coordinates\"\n      vec2 pointToLatLon(vec3 point)\n      {\n        float r = distance(vec3(0.0, 0.0, 0.0), point);\n        vec2 latLon;\n        latLon.x = asin(point.z / r);\n        latLon.y = atan(point.x, point.y);\n        return latLon;\n      }\n\n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      // In more mathy terms we're converting from  \"Spherical Coordinates\" to \"Cartesian Coordinates\"\n      vec3 latLonToPoint(vec2 latLon)\n      {\n          float lat = latLon.x;\n          float lon = latLon.y;\n          vec3 point;\n          point.x = cos(lat) * sin(lon);\n          point.y = cos(lat) * cos(lon);\n          point.z = sin(lat);\n          return point;\n      }\n\n      // Convert pixel coordinates from an Equirectangular image into latitude/longitude coordinates.\n      vec2 equiUvToLatLon(vec2 local_uv)\n      {\n          return vec2(local_uv.y * PI - PI/2.0,\n                      local_uv.x * 2.0*PI - PI);\n      }\n\n      // Convert  pixel coordinates from an Fisheye image into latitude/longitude coordinates.\n      vec2 fisheyeUvToLatLon(vec2 local_uv, float fovOutput)\n      {\n        vec2 pos = 2.0 * local_uv - 1.0;\n        float r = distance(vec2(0.0,0.0),pos.xy);\n        // Don't bother with pixels outside of the fisheye circle\n        if (1.0 < r) {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        vec2 latLon;\n        latLon.x = (1.0 - r)*PI/2.0;\n        // Calculate longitude\n        latLon.y = PI + atan(-pos.x, pos.y);\n          \n        if (latLon.y < 0.0) {\n          latLon.y += 2.0*PI;\n        }\n        vec3 point = latLonToPoint(latLon);\n        point = rotatePoint(point, vec3(PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        return latLon;\n      }\n\n      vec2 sphericalUvToLatLon(vec2 local_uv)\n      {\n          // Return a isTransparent pixel\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n      }\n      \n      vec2 flatImageUvToLatLon(vec2 local_uv, float fovOutput)\n      {\n        // Position of the source pixel in uv coordinates in the range [-1,1]\n        vec2 pos = 2.0 * local_uv - 1.0;\n        float aspectRatio = float(width)/float(height);\n        vec3 point = vec3(pos.x*aspectRatio, 1.0/fovOutput, pos.y);\n        return pointToLatLon(point);\n      }\n\n\n      \n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      vec3 flatLatLonToPoint(vec2 latLon)\n      {\n        vec3 point = latLonToPoint(latLon);\n        // Get phi of this point, see polar coordinate system for more details.\n        float phi = atan(point.x, -point.y);\n        // With phi, calculate the point on the image plane that is also at the angle phi\n        point.x = sin(phi) * tan(PI / 2.0 - latLon.x);\n        point.y = cos(phi) * tan(PI / 2.0 - latLon.x);\n        point.z = 1.0;\n        return point;\n      }\n      // Convert latitude, longitude to x, y pixel coordinates on an equirectangular image.\n      vec2 latLonToEquiUv(vec2 latLon)\n      {\n          vec2 local_uv;\n          local_uv.x = (latLon.y + PI)/(2.0*PI);\n          local_uv.y = (latLon.x + PI/2.0)/PI;\n\n          // Set to transparent if out of bounds\n          if (local_uv.x < -1.0 || local_uv.y < -1.0 || local_uv.x > 1.0 || local_uv.y > 1.0) {\n            // Return a isTransparent pixel\n            isTransparent = true;\n            return SET_TO_TRANSPARENT;\n          }\n          return local_uv;\n      }\n      \n      // Convert latitude, longitude to x, y pixel coordinates on the source fisheye image.\n      vec2 pointToFisheyeUv(vec3 point, float fovInput, vec4 fishCorrect)\n      {\t\n        point = rotatePoint(point, vec3(-PI/2.0, 0.0, 0.0));\n        // Phi and theta are flipped depending on where you read about them.\n        float theta = atan(distance(vec2(0.0,0.0),point.xy),point.z);\n        // The distance from the source pixel to the center of the image\n        float r = (2.0/PI)*(theta/fovInput);\n        if (FISHEYE_RADIAL_CORRECTION)\n        {\n          // Do radial correction. \n          // Source: http://paulbourke.net/dome/fisheyecorrect/\n          r *= 2.0 * (fishCorrect.x + theta * (fishCorrect.y + theta * (fishCorrect.z + theta * fishCorrect.w)));\n        }\n\n        // phi is the angle of r on the unit circle. See polar coordinates for more details\n        float phi = atan(-point.y, point.x);\n        // Get the position of the source pixel\n        vec2 sourcePixel;\n        sourcePixel.x = r * cos(phi);\n        sourcePixel.y = r * sin(phi);\n        // Normalize the output pixel to be in the range [0,1]\n        sourcePixel += 1.0;\n        sourcePixel /= 2.0;\n        // Don't bother with source pixels outside of the fisheye circle\n        if (1.0 < r || sourcePixel.x < 0.0 || sourcePixel.y < 0.0 || sourcePixel.x > 1.0 || sourcePixel.y > 1.0) {\n          // Return a isTransparent pixel\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return sourcePixel;\n      }\n      \n      bool outOfFlatBounds(vec2 xy, float lower, float upper)\n      {\n        vec2 lowerBound = vec2(lower, lower);\n        vec2 upperBound = vec2(upper, upper);\n        return (any(lessThan(xy, lowerBound)) || any(greaterThan(xy, upperBound)));\n      }\n      vec2 latLonToFlatUv(vec2 latLon, float fovInput)\n      {\n        vec3 point = rotatePoint(latLonToPoint(latLon), vec3(-PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        float aspectRatio = float(width)/float(height);\n\n        vec2 xyOnImagePlane;\n        vec3 p;\n        if (latLon.x < 0.0) \n        {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        // Derive a 3D point on the plane which correlates with the latitude and longitude in the fisheye image.\n        p = flatLatLonToPoint(latLon);\n        p.x /= aspectRatio;\n        // Control the scale with the user's fov input parameter.\n        p.xy *= fovInput;\n        // Position of the source pixel in the source image in the range [-1,1]\n        xyOnImagePlane = p.xy / 2.0 + 0.5;\n        if (outOfFlatBounds(xyOnImagePlane, 0.0, 1.0)) \n    \t\t{\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return xyOnImagePlane;\n      }\n      void main()\n      {\n        vec2 temp_uv = uv;\n        temp_uv.x = (temp_uv.x * float(width) / float(height)) - 0.5;\n        if (gridLines == GRIDLINES_ON && outputProjection == FISHEYE)\n        {\n          if (abs(distance(vec2(0.0, 0.0), 2.0 * temp_uv - 1.0) - 1.0) < 0.01)\n          {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n            return;\n          }\n        }\n        vec3 InputRotation = vec3(pitch, roll, yaw);\n        vec4 fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        vec4 centerFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        float fovInput = fovIn;\n        float fovOutput = fovOut;\n        vec4 fishCorrect = vec4(correction1-0.5, correction2, correction3, correction4);\n        fishCorrect.yzw -= 1.0;\n        float lineCount = 0.0;\n\n        // Level Of Detail: how fast should this run?\n        // Set LOD to 0 to run fast, set to two to blur the image, reducing jagged edges\n        const int LOD = 1;\n        //TODO Make Antialiasing a little smarter than this.\n        for(int i = -LOD; i <= LOD; i++)\n        {\n          for(int j = -LOD; j <= LOD; j++)\n          {\n            isTransparent = false;\n\n            \n            vec2 uv_aa = uv + vec2(i, j)/vec2(width, height);\n\n            \n            // vec2 newDimensions = vec2(cropRight-1.0 - cropLeft-1.0, cropTop-1.0 - cropBottom-1.0)\n            // uv_aa = uv_aa\n            // Given some pixel (uv), find the latitude and longitude of that pixel\n            vec2 latLon;\n            if (outputProjection == EQUI)\n              latLon = equiUvToLatLon(uv_aa);\n            else if(outputProjection == FISHEYE)\n            {\n              uv_aa.x = (uv_aa.x * float(width) / float(height)) - 0.5;\n              latLon = fisheyeUvToLatLon(uv_aa, fovOutput);\n            }\n            else if (outputProjection == FLAT)\n              latLon = flatImageUvToLatLon(uv_aa, fovOutput);\n            else if (outputProjection == SPHERE)\n              latLon = sphericalUvToLatLon(uv_aa);\n            // If a pixel is out of bounds, set it to be transparent\n            if (isTransparent)\n            {\n              continue;\n            }\n            // Create a point on the unit-sphere from the calculated latitude and longitude\n            // This sphere uses a right-handed coordinate system\n              // X increases from left to right [-1 to 1]\n              // Y increases from back to front [-1 to 1]\n              // Z increases from bottom to top [-1 to 1]\n            vec3 point = latLonToPoint(latLon);\n            // X, Y, Z translation inputs from the user.\n            point.xyz += 5.0*(vec3(x, y, z) - 1.0);\n            // Rotate the point based on the user input in radians\n            point = rotatePoint(point, InputRotation.rgb * PI);\n            \n            // Convert back to latitude and longitude\n            latLon = pointToLatLon(point);\n            // if (1.0 < distance(point, vec3(0.0, 0.0, 0.0)))\n            // {\n            //   // isTransparent == true;\n            //   gl_FragColor = vec4(latLon.x, latLon.y, 0.0, 1.0);\n            //   return;\n            // }\n            // Convert back to the normalized pixel coordinate\n            vec2 sourcePixel;\n            if (inputProjection == EQUI)\n              sourcePixel = latLonToEquiUv(latLon);\n            else if (inputProjection == FISHEYE)\n              sourcePixel = pointToFisheyeUv(point, fovInput, fishCorrect);\n            else if (inputProjection == FLAT)\n              sourcePixel = latLonToFlatUv(latLon, fovInput);\n\n            vec2 croppedUv = 2.0*sourcePixel-1.0;\n            float croppedWidth = cropRight - (cropLeft - 1.0);\n            float croppedHeight = cropTop - (cropBottom - 1.0);\n            // gl_FragColor = vec4(croppedWidth, 0.0, 0.0, 1.0);\n            // return;\n            croppedUv = vec2(croppedUv.x / cropRight, croppedUv.y / cropTop);\n            float newWidth = float(width) / (croppedWidth + 1.0);\n            float newHeight = float(newWidth) / float(height) ;\n            croppedUv.y /= newHeight;\n            croppedUv = 0.5*croppedUv+0.5;\n            croppedUv.x += xCenter - 1.0;\n            if (croppedUv.x < 0.0  || croppedUv.y < 0.0 || 1.0 < croppedUv.x || 1.0 < croppedUv.y)\n            {\n              continue;\n              // gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n              // return;\n            }\n            // If a pixel is out of bounds, set it to be transparent\n            else if (isTransparent)\n            {\n              continue;\n            }\n            // Set the color of the destination pixel to the color of the source pixel\n            vec4 color = texture2D(InputTexture, croppedUv);\n\n            if (inputProjection == EQUI && gridLines == GRIDLINES_ON)\n            {\n              float minDistance = 0.3;\n              float lineThickness = minDistance;\n              for (float i = -18.0; i <= 18.0; i += 1.0)\n              {\n                float distanceToLine = abs(degrees(latLon.y) - i*10.0);\n                if (distanceToLine <= minDistance)\n                  minDistance = distanceToLine;\n                distanceToLine = abs(degrees(latLon.x) - i*10.0);\n                if (distanceToLine <= minDistance)\n                  minDistance = distanceToLine;\n              }\n              if (minDistance < lineThickness)\n              {\n                color = vec4(0.0, 0.0, 0.0, 1.0);\n                lineCount += 1.0;\n              }\n            }\n            fragColor += color;\n            if (i == 0 && j == 0)\n            {\n              // This is the aliased pixel. If we didn't do antialiasing this is the pixel we'd get.\n              centerFragColor = color;\n            }\n          }\n        }\n        // antiAliasCount: how many pixels the above loop should have calculated\n        float antiAliasCount = float((1+2*LOD)*(1+2*LOD));\n        // If the pixel has any transparency (i.e. the sourcePixel is at the perimeter of the image) then do antialiasing\n        if (fragColor.a < antiAliasCount || lineCount > 0.0)\n        {\n          // Apply antialiasing. Remove the if/else statement if you want to antialias the whole image.\n          gl_FragColor = fragColor / antiAliasCount;\n          \n        }\n        else\n        {\n          // Ignore antialiasing\n          gl_FragColor = centerFragColor;\n        }\n      }\n\n    `\n  }\n});\n\nclass ProjectionComponent extends Component {\n  render() {\n    const { pitch, roll, yaw, inputProjection, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, outputProjection, gridLines, width, height, sourceImage } = this.props\n    return (\n      <Surface width={1400} height={700}>\n        <Node\n          shader={shaders.Reproject}\n          uniforms={{ pitch, roll, yaw, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, inputProjection, outputProjection, gridLines, width:1400, height:700, InputTexture: sourceImage, }}\n        />\n      </Surface>\n    )\n  }\n}\n\nexport default ProjectionComponent;\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport './App.css'\nimport ProjectionComponent from './ProjectionComponent'\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ImageUploader from 'react-images-upload';\n \nclass App extends Component {\n  state = {\n    pitch: 1,\n    roll: 1,\n    yaw: 1,\n    fovIn: 1,\n    fovOut: 1,\n    x: 1,\n    y: 1,\n    z: 1,\n    correction1: 1,\n    correction2: 1, \n    correction3: 1,\n    correction4: 1, \n    cropTop: 1,\n    cropBottom: 1,\n    cropLeft: 1,\n    cropRight: 1,\n    xCenter: 1,\n    inputProjection: 0,\n    outputProjection: 0,\n    gridLines: 0,\n    pictures: [],\n    sourceImage: \"earth.jpg\", \n    name: \"\",\n    uploadedImage: \"\",\n  }\n  handleProjectionChange = (event, value) => {\n    this.setState({ inputProjection: value });\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handlePitchChange = (event, value) => {\n    this.setState({ pitch: value/50 });\n  }\n\n  handleRollChange = (event, value) => {\n    this.setState({ roll: value/50 });\n  }\n\n  handleYawChange = (event, value) => {\n    this.setState({ yaw: value/50 });\n  }\n  handleFovInChange = (event, value) => {\n    this.setState({ fovIn: value/50 });\n  }\n\n  handleFovOutChange = (event, value) => {\n    this.setState({ fovOut: value/50 });\n  }\n  handleCorrection1Change = (event, value) => {\n    this.setState({ correction1: value/50 });\n  }\n  handleCorrection2Change = (event, value) => {\n    this.setState({ correction2: value/50 });\n  }\n  handleCorrection3Change = (event, value) => {\n    this.setState({ correction3: value/50 });\n  }\n  handleCorrection4Change = (event, value) => {\n    this.setState({ correction4: value/50 });\n  }\n  handleXChange = (event, value) => {\n    this.setState({ x: value/50 });\n  }\n  handleYChange = (event, value) => {\n    this.setState({ y: value/50 });\n  }\n  handleZChange = (event, value) => {\n    this.setState({ z: value/50 });\n  }\n  handleSliderChange = (event, value) => {\n    this.setState({ [event.target.name]: event.target.value/50 });\n  }\n  handleCropTopChange = (event, value) => {\n    this.setState({ cropTop: value/50,\n                    cropBottom: 2.0 - value/50 });\n  }\n  handleCropBottomChange = (event, value) => {\n    this.setState({ cropBottom: value/50,\n                    cropTop: 2.0 - value/50 });\n  }\n  handleCropLeftChange = (event, value) => {\n    this.setState({ cropLeft: value/50, \n                    cropRight: 2.0 - value/50});\n  }\n  handleCropRightChange = (event, value) => {\n    this.setState({ cropRight: value/50,\n                    cropLeft: 2.0 - value/50 });\n  }\n  handleXCenterChange = (event, value) => {\n    this.setState({ xCenter: value/50 });\n  }\n\n  constructor(props) {\n      super(props);\n        this.onDrop = this.onDrop.bind(this);\n  }\n  onDrop(picture) {\n      this.setState({\n          pictures: picture,\n          uploadedImage: picture[picture.length-1].name,\n          sourceImage: picture[picture.length-1].name,\n          \n      });\n  }\n  render() {\n    const { pitch, roll, yaw, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, inputProjection, outputProjection, gridLines, sourceImage } = this.state\n    return (\n      <div className='App-container'>\n      <div className='App-slider'>\n        <div className='App-Options'>\n          <ImageUploader\n              withIcon={true}\n              buttonText='Choose image'\n              onChange={this.onDrop}\n              imgExtension={['.jpg', '.gif', '.png', '.gif']}\n              maxFileSize={5242880}\n              singleImage={true}\n              withPreview={false}\n          />\n        </div>\n        <div className='App-Options'>\n          <InputLabel htmlFor=\"sourceImage\">Source Image</InputLabel>\n              { <Select\n                value={this.sourceImage}\n                onChange={this.handleChange}\n                inputProps={{\n                  name: 'sourceImage',\n                  id: 'sourceImage',\n                }}\n              >\n                <MenuItem value={\"earth.jpg\"}>Earth</MenuItem>\n                <MenuItem value={\"earth_8k.jpg\"}>Earth 8k</MenuItem>\n                <MenuItem value={\"radial.jpg\"}>Fisheye Grid</MenuItem>\n                <MenuItem value={\"bourke_sphericalpano.jpg\"}>360 Photo</MenuItem>\n                <MenuItem value={this.state.uploadedImage}>{this.state.uploadedImage}</MenuItem>\n              </Select>\n              }\n        </div>\n        \n        <div className='App-Options'>\n          <InputLabel shrink htmlFor=\"inputProjection\">\n              Input Projection\n            </InputLabel>\n              { <Select\n                value={this.inputProjection}\n                onChange={this.handleChange}\n                inputProps={{\n                  name: 'inputProjection',\n                  id: 'inputProjection',\n                }}\n                displayEmpty\n              >\n                <MenuItem value={0}>Equirectangular</MenuItem>\n                <MenuItem value={1}>Fisheye</MenuItem>\n                <MenuItem value={2}>Rectilinear</MenuItem>\n              </Select>\n              }\n        </div>\n        \n        <div className='App-Options'>\n            <InputLabel htmlFor=\"outputProjection\">Output Projection</InputLabel>\n            { <Select\n              value={this.outputProjection}\n              onChange={this.handleChange}\n              inputProps={{\n                name: 'outputProjection',\n                id: 'outputProjection',\n              }}\n            >\n              <MenuItem value={0}>Equirectangular</MenuItem>\n              <MenuItem value={1}>Fisheye</MenuItem>\n              <MenuItem value={2}>Rectilinear</MenuItem>\n              <MenuItem value={3}>Sphere</MenuItem>\n            </Select>\n            }\n        </div>\n        <div className='App-Options'>\n            <InputLabel htmlFor=\"gridLines\">Grid Lines</InputLabel>\n            { <Select\n              value={this.gridLines}\n              onChange={this.handleChange}\n              inputProps={{\n                name: 'gridLines',\n                id: 'gridLines',\n              }}\n            >\n              <MenuItem value={0}>Off</MenuItem>\n              <MenuItem value={1}>On</MenuItem>\n            </Select>\n            }\n        </div>\n        <div className='App-Options'>\n            <p>Pitch</p>\n            <Slider\n              value={pitch*50}\n              onChange={this.handlePitchChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Roll</p>\n            <Slider\n              value={roll*50}\n              onChange={this.handleRollChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Yaw</p>\n            <Slider\n              value={yaw*50}\n              onChange={this.handleYawChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Field of View In</p>\n            <Slider\n              value={fovIn*50}\n              onChange={this.handleFovInChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Field of View Out</p>\n            <Slider\n              value={fovOut*50}\n              onChange={this.handleFovOutChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>X</p>\n            <Slider\n              value={x*50}\n              onChange={this.handleXChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Y</p>\n            <Slider\n              value={y*50}\n              onChange={this.handleYChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Z</p>\n            <Slider\n              value={z*50}\n              onChange={this.handleZChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Top</p>\n            <Slider\n              value={cropTop*50}\n              onChange={this.handleCropTopChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Bottom</p>\n            <Slider\n              value={cropBottom*50}\n              onChange={this.handleCropBottomChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Left</p>\n            <Slider\n              value={cropLeft*50}\n              onChange={this.handleCropLeftChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Right</p>\n            <Slider\n              value={cropRight*50}\n              onChange={this.handleCropRightChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>X Center</p>\n            <Slider\n              value={xCenter*50}\n              onChange={this.handleXCenterChange}\n            />\n        </div>\n            <p>Fisheye Correction 1: {this.state.correction1 - 0.5}</p>\n            <Slider\n              value={correction1*50}\n              onChange={this.handleCorrection1Change}\n            />\n            <p>Fisheye Correction 2: {this.state.correction2 - 1}</p>\n            <Slider\n              value={correction2*50}\n              onChange={this.handleCorrection2Change}\n            />\n            <p>Fisheye Correction 3: {this.state.correction3 - 1}</p>\n            <Slider\n              value={correction3*50}\n              onChange={this.handleCorrection3Change}\n            />\n            <p>Fisheye Correction 4: {this.state.correction4 - 1}</p>\n            <Slider\n              value={correction4*50}\n              onChange={this.handleCorrection4Change}\n            />\n        </div>\n        <div className='App-Projection'>\n          <ProjectionComponent pitch={pitch} roll={roll} yaw={yaw} fovIn={fovIn} fovOut={fovOut} x={x} y={y} z={z} xCenter={xCenter} correction1={correction1} correction2={correction2} correction3={correction3} correction4={correction4} cropTop={cropTop} cropBottom={cropBottom} cropLeft={cropLeft} cropRight={cropRight}  inputProjection={inputProjection} outputProjection={outputProjection} gridLines={gridLines} sourceImage={sourceImage}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}