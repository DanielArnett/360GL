{"version":3,"sources":["ProjectionComponent.js","App.js","serviceWorker.js","index.js"],"names":["shaders","Shaders","create","Saturate","frag","GLSL","_templateObject","ProjectionComponent","_this$props","this","props","pitch","roll","yaw","inputProjection","outputProjection","sourceImage","width","height","react_default","a","createElement","gl_react_dom_lib","lib","shader","uniforms","InputTexture","Component","App","state","name","handleProjectionChange","event","value","_this","setState","handleChange","Object","defineProperty","target","handlePitchChange","handleRollChange","handleYawChange","_this$state","className","InputLabel_default","htmlFor","Select_default","onChange","inputProps","id","MenuItem_default","shrink","displayEmpty","Slider_default","src_ProjectionComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.567a8fed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Shaders, Node, GLSL } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\n\nconst shaders = Shaders.create({\n  Saturate: {\n    frag: GLSL`\n    // TODO turn this into its own .frag file.\n      precision highp float;\n      float PI = 3.14159265359;\n      vec2 SET_TO_TRANSPARENT = vec2(-1.0, -1.0);\n      vec4 TRANSPARENT_PIXEL = vec4(0.0, 0.0, 0.0, 0.0);\n      uniform sampler2D InputTexture;\n      uniform float pitch, roll, yaw;\n      uniform int inputProjection, outputProjection, width, height;\n      varying vec2 uv;\n      bool isTransparent = false;\n      const int EQUI = 0;\n      const int FISHEYE = 1;\n      const int FLAT = 2;\n      const int SPHERE = 3;\n\n      // uniform vec3 InputRotation;\n      // A transformation matrix rotating about the x axis by th degrees.\n      mat3 Rx(float th)\n      {\n          return mat3(1, 0, 0,\n                      0, cos(th), -sin(th),\n                      0, sin(th), cos(th));\n      }\n      // A transformation matrix rotating about the y axis by th degrees.\n      mat3 Ry(float th)\n      {\n          return mat3(cos(th), 0, sin(th),\n                         0,    1,    0,\n                      -sin(th), 0, cos(th));\n      }\n      // A transformation matrix rotating about the z axis by th degrees.\n      mat3 Rz(float th)\n      {\n          return mat3(cos(th), -sin(th), 0,\n                      sin(th),  cos(th), 0,\n                        0,         0   , 1);\n      }\n\n      // Rotate a point vector by th.x then th.y then th.z, and return the rotated point.\n      vec3 rotatePoint(vec3 p, vec3 th)\n      {\n        return Rx(th.x) * Ry(th.y) * Rz(th.z) * p;\n      }\n\n      // Convert a 3D point on the unit sphere into latitude and longitude.\n      vec2 pointToLatLon(vec3 point)\n      {\n        float r = distance(vec3(0.0, 0.0, 0.0), point);\n        vec2 latLon;\n        latLon.x = asin(point.z / r);\n        latLon.y = atan(point.x, point.y);\n        return latLon;\n      }\n\n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      vec3 latLonToPoint(vec2 latLon)\n      {\n          float lat = latLon.x;\n          float lon = latLon.y;\n          vec3 point;\n          point.x = cos(lat) * sin(lon);\n          point.y = cos(lat) * cos(lon);\n          point.z = sin(lat);\n          return point;\n      }\n\n      // Convert pixel coordinates from an Equirectangular image into latitude/longitude coordinates.\n      vec2 EquiUvToLatLon(vec2 local_uv)\n      {\n          return vec2(local_uv.y * PI - PI/2.0,\n                      local_uv.x * 2.0*PI - PI);\n      }\n\n      // Convert  pixel coordinates from an Fisheye image into latitude/longitude coordinates.\n      vec2 FisheyeUvToLatLon(vec2 local_uv)\n      {\n        vec2 pos = 2.0 * local_uv - 1.0;\n        float r = distance(vec2(0.0, 0.0), pos);\n        // Don't bother with pixels outside of the fisheye circle\n        if (1.0 < r) {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        vec2 latLon;\n        latLon.x = (1.0 - r)*(PI / 2.0);\n        // Calculate longitude\n        latLon.y = PI + atan(-pos.x, pos.y);\n          \n        if (latLon.y < 0.0) {\n          latLon.y += 2.0*PI;\n        }\n        vec3 point = latLonToPoint(latLon);\n        point = rotatePoint(point, vec3(PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        return latLon;\n      }\n\n      vec2 sphericalUvToLatLon(vec2 local_uv)\n      {\n          // Return a isTransparent pixel\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n      }\n      \n      vec2 flatImageUvToLatLon(vec2 local_uv)\n      {\n        // Position of the source pixel in uv coordinates in the range [-1,1]\n        vec2 pos = 2.0 * local_uv - 1.0;\n        float aspectRatio = float(width)/float(height);\n        vec3 point = vec3(pos.x*aspectRatio, 1.0, pos.y);\n        return pointToLatLon(point);\n      }\n\n\n      \n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      vec3 flatLatLonToPoint(vec2 latLon)\n      {\n        vec3 point = latLonToPoint(latLon);\n        // Get phi of this point, see polar coordinate system for more details.\n        float phi = atan(point.x, -point.y);\n        // With phi, calculate the point on the image plane that is also at the angle phi\n        point.x = sin(phi) * tan(PI / 2.0 - latLon.x);\n        point.y = cos(phi) * tan(PI / 2.0 - latLon.x);\n        point.z = 1.0;\n        return point;\n      }\n      // Convert latitude, longitude to x, y pixel coordinates on an equirectangular image.\n      vec2 latLonToEquiUv(vec2 latLon)\n      {\n          vec2 local_uv;\n          local_uv.x = (latLon.y + PI)/(2.0*PI);\n          local_uv.y = (latLon.x + PI/2.0)/PI;\n\n          // Set to transparent if out of bounds\n          if (local_uv.x < -1.0 || local_uv.y < -1.0 || local_uv.x > 1.0 || local_uv.y > 1.0) {\n            // Return a isTransparent pixel\n            isTransparent = true;\n            return SET_TO_TRANSPARENT;\n          }\n          return local_uv;\n      }\n      \n      // Convert latitude, longitude to x, y pixel coordinates on the source fisheye image.\n      vec2 pointToFisheyeUv(vec3 point)\n      {\t\n        point = rotatePoint(point, vec3(-PI/2.0, 0.0, 0.0));\n        vec2 latLon = pointToLatLon(point);\n        // The distance from the source pixel to the center of the image\n        float r;\n        // phi is the angle of r on the unit circle. See polar coordinates for more details\n        float phi;\n        // Get the position of the source pixel\n        vec2 sourcePixel;\n        // Get the source pixel radius from center\n        r = 1.0 - latLon.x/(PI / 2.0);\n        phi = atan(-point.y, point.x);\n        \n        sourcePixel.x = r * cos(phi);\n        sourcePixel.y = r * sin(phi);\n        // Normalize the output pixel to be in the range [0,1]\n        sourcePixel += 1.0;\n        sourcePixel /= 2.0;\n        // Don't bother with source pixels outside of the fisheye circle\n        if (1.0 < r || sourcePixel.x < 0.0 || sourcePixel.y < 0.0 || sourcePixel.x > 1.0 || sourcePixel.y > 1.0) {\n          // Return a isTransparent pixel\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return sourcePixel;\n      }\n      \n      bool outOfFlatBounds(vec2 xy, float lower, float upper)\n      {\n        vec2 lowerBound = vec2(lower, lower);\n        vec2 upperBound = vec2(upper, upper);\n        return (any(lessThan(xy, lowerBound)) || any(greaterThan(xy, upperBound)));\n      }\n      vec2 latLonToFlatUv(vec2 latLon)\n      {\n        vec3 point = rotatePoint(latLonToPoint(latLon), vec3(-PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        float aspectRatio = float(width)/float(height);\n\n        vec2 xyOnImagePlane;\n        vec3 p;\n        if (latLon.x < 0.0) \n        {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        // Derive a 3D point on the plane which correlates with the latitude and longitude in the fisheye image.\n        p = flatLatLonToPoint(latLon);\n        p.x /= aspectRatio;\n        // Position of the source pixel in the source image in the range [-1,1]\n        xyOnImagePlane = p.xy / 2.0 + 0.5;\n        if (outOfFlatBounds(xyOnImagePlane, 0.0, 1.0)) \n    \t\t{\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return xyOnImagePlane;\n      }\n      void main()\n      {\n        vec3 InputRotation = vec3(pitch, roll, yaw);\n        vec4 fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        vec4 centerFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        // Level Of Detail: how fast should this run?\n        // Set LOD to 0 to run fast, set to two to blur the image, reducing jagged edges\n        const int LOD = 1;\n        //TODO Make Antialiasing a little smarter than this.\n        for(int i = -LOD; i <= LOD; i++)\n        {\n          for(int j = -LOD; j <= LOD; j++)\n          {\n            isTransparent = false;\n            vec2 uv_aa = uv + vec2(i, j)/vec2(width, height);\n            // Given some pixel (uv), find the latitude and longitude of that pixel\n            vec2 latLon;\n            if (outputProjection == EQUI)\n              latLon = EquiUvToLatLon(uv_aa);\n            else if(outputProjection == FISHEYE)\n              latLon = FisheyeUvToLatLon(uv_aa);\n            else if (outputProjection == FLAT)\n              latLon = flatImageUvToLatLon(uv_aa);\n            else if (outputProjection == SPHERE)\n              latLon = sphericalUvToLatLon(uv_aa);\n            // If a pixel is out of bounds, set it to be transparent\n            if (isTransparent)\n            {\n              continue;\n            }\n            // Create a point on the unit-sphere from the calculated latitude and longitude\n            // This sphere uses a right-handed coordinate system\n              // X increases from left to right [-1 to 1]\n              // Y increases from back to front [-1 to 1]\n              // Z increases from bottom to top [-1 to 1]\n            vec3 point = latLonToPoint(latLon);\n            // Rotate the point based on the user input in radians\n            point = rotatePoint(point, InputRotation.rgb * PI);\n            // Convert back to latitude and longitude\n            latLon = pointToLatLon(point);\n            \n            // Convert back to the normalized pixel coordinate\n            vec2 sourcePixel;\n            if (inputProjection == EQUI)\n              sourcePixel = latLonToEquiUv(latLon);\n            else if (inputProjection == FISHEYE)\n              sourcePixel = pointToFisheyeUv(point);\n            else if (inputProjection == FLAT)\n              sourcePixel = latLonToFlatUv(latLon);\n            // If a pixel is out of bounds, set it to be transparent\n            if (isTransparent)\n            {\n              continue;\n            }\n            // Set the color of the destination pixel to the color of the source pixel\n            vec4 color = texture2D(InputTexture, sourcePixel);\n            fragColor += color;\n            if (i == 0 && j == 0)\n            {\n              centerFragColor = color;\n            }\n          }\n        }\n        // Basically this is how many pixels the above loop should have calculated\n        float antiAliasCount = float((1+2*LOD)*(1+2*LOD));\n        // If the pixel has any transparency at all then do antialiasing\n        if (fragColor.a < antiAliasCount)\n        {\n          // Apply antialiasing. Remove the if/else statement if you want to antialias the whole image.\n          gl_FragColor = fragColor / antiAliasCount;\n          \n        }\n        else\n        {\n          // Ignore antialiasing\n          gl_FragColor = centerFragColor;\n        }\n      }\n\n    `\n  }\n});\n\nclass ProjectionComponent extends Component {\n  render() {\n    const { pitch, roll, yaw, inputProjection, outputProjection, width, height, sourceImage } = this.props\n    return (\n      <Surface width={1200} height={600}>\n        <Node\n          shader={shaders.Saturate}\n          uniforms={{ pitch, roll, yaw, inputProjection, outputProjection, width:1200, height:600, InputTexture: sourceImage, }}\n        />\n      </Surface>\n    )\n  }\n}\n\nexport default ProjectionComponent;\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport './App.css'\nimport ProjectionComponent from './ProjectionComponent'\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass App extends Component {\n  state = {\n    pitch: 1,\n    roll: 1,\n    yaw: 1,\n    inputProjection: 0,\n    outputProjection: 0,\n    sourceImage: \"earth.jpg\", \n    name: \"\",\n  }\n  handleProjectionChange = (event, value) => {\n    this.setState({ inputProjection: value });\n  }\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  handlePitchChange = (event, value) => {\n    this.setState({ pitch: value/50 });\n  }\n\n  handleRollChange = (event, value) => {\n    this.setState({ roll: value/50 });\n  }\n\n  handleYawChange = (event, value) => {\n    this.setState({ yaw: value/50 });\n  }\n\n  render() {\n    const { pitch, roll, yaw, inputProjection, outputProjection, sourceImage } = this.state\n    return (\n      <div className='App-container'>\n      <div className='App-slider'>\n        <div className='Source-image-selecter'>\n          <InputLabel htmlFor=\"sourceImage\">Source Image</InputLabel>\n              { <Select\n                value={this.sourceImage}\n                onChange={this.handleChange}\n                inputProps={{\n                  name: 'sourceImage',\n                  id: 'sourceImage',\n                }}\n              >\n                <MenuItem value={\"earth.jpg\"}>Earth</MenuItem>\n                <MenuItem value={\"earth_8k.jpg\"}>Earth 8k</MenuItem>\n                <MenuItem value={\"radial.jpg\"}>Fisheye Grid</MenuItem>\n                <MenuItem value={\"bourke_sphericalpano.jpg\"}>360 Photo</MenuItem>\n              </Select>\n              }\n        </div>\n        <InputLabel shrink htmlFor=\"inputProjection\">\n            Input Projection\n          </InputLabel>\n            { <Select\n              value={this.inputProjection}\n              onChange={this.handleChange}\n              inputProps={{\n                name: 'inputProjection',\n                id: 'inputProjection',\n              }}\n              displayEmpty\n            >\n              <MenuItem value={0}>Equirectangular</MenuItem>\n              <MenuItem value={1}>Fisheye</MenuItem>\n              <MenuItem value={2}>Rectilinear</MenuItem>\n            </Select>\n            }\n            <InputLabel htmlFor=\"outputProjection\">Output Projection</InputLabel>\n            { <Select\n              value={this.outputProjection}\n              onChange={this.handleChange}\n              inputProps={{\n                name: 'outputProjection',\n                id: 'outputProjection',\n              }}\n            >\n              <MenuItem value={0}>Equirectangular</MenuItem>\n              <MenuItem value={1}>Fisheye</MenuItem>\n              <MenuItem value={2}>Rectilinear</MenuItem>\n              <MenuItem value={3}>Sphere</MenuItem>\n            </Select>\n            }\n            <p>Pitch</p>\n            <Slider\n              value={pitch*50}\n              onChange={this.handlePitchChange}\n            />\n            <p>Roll</p>\n            <Slider\n              value={roll*50}\n              onChange={this.handleRollChange}\n            />\n            <p>Yaw</p>\n            <Slider\n              value={yaw*50}\n              onChange={this.handleYawChange}\n            />\n        </div>\n        <div className='App-Projection'>\n          <ProjectionComponent pitch={pitch} roll={roll} yaw={yaw} inputProjection={inputProjection} outputProjection={outputProjection} sourceImage={sourceImage}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}