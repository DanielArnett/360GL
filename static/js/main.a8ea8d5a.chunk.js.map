{"version":3,"sources":["ProjectionComponent.js","App.js","serviceWorker.js","index.js"],"names":["shaders","Shaders","create","Reproject","frag","GLSL","_templateObject","ProjectionComponent","_this$props","this","props","pitch","roll","yaw","inputProjection","fovIn","fovOut","x","y","z","correction1","correction2","correction3","correction4","cropTop","cropBottom","cropLeft","cropRight","xCenter","yCenter","outputProjection","gridLines","solidAngle","sourceImage","width","height","test","react_default","a","createElement","gl_react_dom_lib","lib","shader","uniforms","InputTexture","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pictures","name","uploadedImage","url","handleChange","event","value","target","setState","defineProperty","handleUrlChange","handlePitchChange","handleRollChange","handleYawChange","handleFovInChange","handleFovOutChange","handleCorrection1Change","handleCorrection2Change","handleCorrection3Change","handleCorrection4Change","handleXChange","handleYChange","handleZChange","handleSliderChange","handleCropTopChange","handleCropBottomChange","handleCropLeftChange","handleCropRightChange","handleXCenterChange","handleYCenterChange","handleTestChange","onDrop","bind","assertThisInitialized","alert","preventDefault","picture","length","_this$state","className","TextField_default","id","label","TextField","onChange","margin","variant","Select_default","inputProps","MenuItem_default","displayEmpty","toFixed","Slider_default","type","InputLabelProps","shrink","src_ProjectionComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8ea8d5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Shaders, Node, GLSL } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\n\nconst shaders = Shaders.create({\n  Reproject: {\n    frag: GLSL`\n    // TODO turn this into its own .frag file.\n      precision highp float;\n      float PI = 3.14159265358979323846264338327950288419716939937510;\n      vec2 SET_TO_TRANSPARENT = vec2(-1.0, -1.0);\n      vec4 TRANSPARENT_PIXEL = vec4(0.0, 0.0, 0.0, 0.0);\n      bool FISHEYE_RADIAL_CORRECTION = true;\n      uniform float correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter;\n      uniform sampler2D InputTexture;\n      uniform float pitch, roll, yaw, fovIn, fovOut, x, y, z;\n      uniform int inputProjection, outputProjection, gridLines, solidAngle, width, height;\n      uniform float test;\n      varying vec2 uv;\n      bool isTransparent = false; // A global flag indicating if the pixel should just set to transparent and return immediately. \n      const int EQUI = 0;\n      const int FISHEYE = 1;\n      const int FLAT = 2;\n      const int CUBEMAP = 3;\n      const int GRIDLINES_OFF = 0;\n      const int GRIDLINES_ON = 1;\n\n      // uniform vec3 InputRotation;\n      // A transformation matrix rotating about the x axis by th degrees.\n      mat3 Rx(float th)\n      {\n          return mat3(1, 0, 0,\n                      0, cos(th), -sin(th),\n                      0, sin(th), cos(th));\n      }\n      // A transformation matrix rotating about the y axis by th degrees.\n      mat3 Ry(float th)\n      {\n          return mat3(cos(th), 0, sin(th),\n                         0,    1,    0,\n                      -sin(th), 0, cos(th));\n      }\n      // A transformation matrix rotating about the z axis by th degrees.\n      mat3 Rz(float th)\n      {\n          return mat3(cos(th), -sin(th), 0,\n                      sin(th),  cos(th), 0,\n                        0,         0   , 1);\n      }\n\n      // Rotate a point vector by th.x then th.y then th.z, and return the rotated point.\n      // TODO I'm abusing this function rather than just writing pointToSphericalCoordinates\n      // Find instances where this can be simplified.\n      vec3 rotatePoint(vec3 p, vec3 th)\n      {\n        return Rx(th.x) * Ry(th.y) * Rz(th.z) * p;\n      }\n\n      // Convert a 3D point on the unit sphere into latitude and longitude.\n      // In more mathy terms we're converting from \"Cartesian Coordinates\" to \"Spherical Coordinates\"\n      vec2 pointToLatLon(vec3 point)\n      {\n        float r = distance(vec3(0.0, 0.0, 0.0), point);\n        vec2 latLon;\n        latLon.x = asin(point.z / r);\n        latLon.y = atan(point.x, point.y);\n        return latLon;\n      }\n\n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      // In more mathy terms we're converting from  \"Spherical Coordinates\" to \"Cartesian Coordinates\"\n      vec3 latLonToPoint(vec2 latLon)\n      {\n          float lat = latLon.x;\n          float lon = latLon.y;\n          vec3 point;\n          point.x = cos(lat) * sin(lon);\n          point.y = cos(lat) * cos(lon);\n          point.z = sin(lat);\n          return point;\n      }\n\n      // Convert pixel coordinates from an Equirectangular image into latitude/longitude coordinates.\n      vec2 equiUvToLatLon(vec2 local_uv)\n      {\n          return vec2(local_uv.y * PI - PI/2.0,\n                      local_uv.x * 2.0*PI - PI);\n      }\n\n      // Apply radial correction to a 3D point.\n      vec3 pointRadialCorrection(vec3 point) \n      {\n        // Rotate the point so that latitude corresponds with the center of the frame.\n        // We could do it without rotation, by reimplementing pointToLatLon\n        vec3 rotation = vec3(-PI/2.0, 0.0, 0.0);\n        point = rotatePoint(point, rotation);\n        // Get the calibration parameters\n        vec4 fishCorrect = vec4(correction1, correction2, correction3, correction4);\n        // vec4 fishCorrect = vec4(-0.0835, -0.021129, 0.0303, -0.16599);\n        // fishCorrect.xyzw -= 1.0;\n        // Get the longitude\n        vec2 latLon = pointToLatLon(point);\n        // Get the radius of the point in the xy plane\n        float r = distance(point.xy, vec2(0.0, 0.0));\n        // Apply the calibration parameters\n        r += r * (fishCorrect.x + r * (fishCorrect.y + r * (fishCorrect.z + r * fishCorrect.w)));\n        point.x = r * sin(latLon.y);\n        point.y = r * cos(latLon.y);\n        // Make sure the point is back on the unit sphere\n        point = normalize(point);\n        return rotatePoint(point, -rotation);\n      }\n      // Convert  pixel coordinates from an Fisheye image into 3D point.\n      vec3 fisheyeUvToPoint(vec2 local_uv, float fovOutput)\n      {\n        \n        vec2 pos = 2.0 * local_uv - 1.0;\n        // The distance from the source pixel to the center of the image\n        float r = distance(vec2(0.0,0.0),pos.xy);\n        // Don't bother with pixels outside of the fisheye circle\n        if (1.0 < r) {\n          isTransparent = true;\n          return vec3(0.0, 0.0, 0.0);\n        }\n        float theta = atan(r, 1.0);\n        r = tan(theta/fovOutput);\n        vec2 latLon;\n        latLon.x = (1.0 - r) * (PI/2.0);\n        // Calculate longitude\n        latLon.y = PI + atan(-pos.x, pos.y);\n          \n        if (latLon.y < 0.0) {\n          latLon.y += 2.0*PI;\n        }\n        vec3 point = latLonToPoint(latLon);\n        point =  normalize(point);\n        point = rotatePoint(point, vec3(PI/2.0, 0.0, 0.0));\n        return point;\n      }\n\n      // Convert  pixel coordinates from an Fisheye image into latitude/longitude coordinates.\n      vec2 fisheyeUvToLatLon(vec2 local_uv, float fovOutput)\n      {\n        vec3 point = fisheyeUvToPoint(local_uv, fovOutput);\n        vec2 latLon = pointToLatLon(point);\n        return latLon;\n      }\n\n      // Convert a cubemap uv to a 3d point on a unit cube\n      vec3 cubemapUvToPoint(vec2 local_uv)\n      {\n        float verticalBoundary = 0.5;\n        float leftBoundary  = 1.0/3.0;\n        float rightBoundary = 2.0/3.0;\n        // Position of the source pixel in uv coordinates in the range [-1,1]\n        vec2 pos = (2.0 * local_uv) - 1.0;\n        vec3 point;\n        float faceDistance = fovOut / 3.0;\n        // Is it a standard cubemap or an EAC?\n        // Link for more details: https://blog.google/products/google-ar-vr/bringing-pixels-front-and-center-vr-video/\n        bool equiAngularCubemap = true;\n        // Remove overlap in the image.\n        float verticalCorrection = 2.0/3.0;\n        // No idea why this was needed, but ~1.15 seems to work and pi / e is really close.\n        float piDividedByE = 1.155727349790921717910093183312696299120851023164415820499;\n        // The faces of the cubemap. To explain I'll define the following:\n        // Let's call +X: \"Right\"\n        //            -X: \"Left\"\n        //            +Y: \"Forward\"\n        //            -Y: \"Back\"\n        //            +Z: \"Up\"\n        //            -Z: \"Down\"\n        // Top left face in output image\n        if (local_uv.x <= leftBoundary && verticalBoundary <= local_uv.y) {\n          pos += vec2(2.0/3.0, -0.5);\n          if(equiAngularCubemap)  {\n            pos = tan(pos*PI/2.0)/2.0;\n            pos.x *= piDividedByE;\n          }\n          // \"Left\" face of cube\n          point = vec3(-faceDistance, pos.x, verticalCorrection*pos.y);\n        }\n        // Top Middle Face in output image\n        else if (leftBoundary < local_uv.x && local_uv.x <= rightBoundary && verticalBoundary <= local_uv.y) {\n          pos += vec2(0.0, -0.5);\n          if(equiAngularCubemap)  {\n            pos = tan(pos*PI/2.0)/2.0;\n            pos.x *= piDividedByE;\n          }\n          // \"Front\" face of cube \n          point = vec3(pos.x, faceDistance, verticalCorrection*pos.y);\n        }\n        // Top Right Face in output image\n        else if (rightBoundary < local_uv.x && verticalBoundary <= local_uv.y) {\n          pos += vec2(-2.0/3.0, -0.5);\n          if(equiAngularCubemap)  {\n            pos = tan(pos*PI/2.0)/2.0;\n            pos.x *= piDividedByE;\n          }\n          // \"Right\" face of cube\n          point = vec3(faceDistance, -pos.x, verticalCorrection*pos.y);\n\n        }\n        // Bottom left face in output image\n        else if (local_uv.x <= leftBoundary && local_uv.y < verticalBoundary) {\n          pos += vec2(2.0/3.0, 0.5);\n          if(equiAngularCubemap)  {\n            pos = tan(pos*PI/2.0)/2.0;\n            pos.x *= piDividedByE;\n          }\n          // \"Top\" face of cube\n          point = vec3(-pos.y*verticalCorrection, -pos.x, faceDistance);\n\n        }\n        // Bottom Middle Face in output image\n        else if (leftBoundary < local_uv.x && local_uv.x <= rightBoundary && local_uv.y < verticalBoundary) {\n          pos += vec2(0.0, 0.5);\n          if(equiAngularCubemap)  {\n            pos = tan(pos*PI/2.0)/2.0;\n            pos.x *= piDividedByE;\n          }\n          // \"Back\" face of cube\n          point = vec3(-pos.y*verticalCorrection, -faceDistance, -pos.x);\n\n        }\n        // Bottom Right Face in output image\n        else if (rightBoundary < local_uv.x && local_uv.y < verticalBoundary) {\n          pos += vec2(-2.0/3.0, 0.5);\n          if(equiAngularCubemap)  {\n            pos = tan(pos*PI/2.0)/2.0;\n            pos.x *= piDividedByE;\n          }\n          // \"Bottom\" face of cube\n          point = vec3(-pos.y*verticalCorrection, pos.x, -faceDistance);\n\n        }\n        return point;\n      }\n      // Convert a cubemap image to Latitude/Longitude Points\n      vec2 cubemapUvToLatLon(vec2 local_uv)\n      {\n        return pointToLatLon(cubemapUvToPoint(local_uv));\n      }\n\n      vec3 flatImageUvToPoint(vec2 local_uv, float fovOutput)\n      {\n        // Position of the source pixel in uv coordinates in the range [-1,1]\n        vec2 pos = 2.0 * local_uv - 1.0;\n        float aspectRatio = float(width)/float(height);\n        vec3 point = vec3(pos.x*aspectRatio, 1.0/fovOutput, pos.y);\n        point = normalize(point);\n        return point;\n      }\n      \n      vec2 flatImageUvToLatLon(vec2 local_uv, float fovOutput)\n      {\n        vec3 point = flatImageUvToPoint(local_uv, fovOutput);\n        return pointToLatLon(point);\n      }\n      \n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      vec3 flatLatLonToPoint(vec2 latLon)\n      {\n        vec3 point = latLonToPoint(latLon);\n        // Get phi of this point, see polar coordinate system for more details.\n        float phi = atan(point.x, -point.y);\n        // With phi, calculate the point on the image plane that is also at the angle phi\n        point.x = sin(phi) * tan(PI / 2.0 - latLon.x);\n        point.y = cos(phi) * tan(PI / 2.0 - latLon.x);\n        point.z = 1.0;\n        return point;\n      }\n      // Convert latitude, longitude to x, y pixel coordinates on an equirectangular image.\n      vec2 latLonToEquiUv(vec2 latLon)\n      {\n          vec2 local_uv;\n          local_uv.x = (latLon.y + PI)/(2.0*PI);\n          local_uv.y = (latLon.x + PI/2.0)/PI;\n\n          // Set to transparent if out of bounds\n          if (local_uv.x < -1.0 || local_uv.y < -1.0 || local_uv.x > 1.0 || local_uv.y > 1.0) {\n            // Return a isTransparent pixel\n            isTransparent = true;\n            return SET_TO_TRANSPARENT;\n          }\n          return local_uv;\n      }\n      \n      // Convert latitude, longitude to x, y pixel coordinates on the source fisheye image.\n      vec2 pointToFisheyeUv(vec3 point, float fovInput, vec4 fishCorrect)\n      {\t\n        point = rotatePoint(point, vec3(-PI/2.0, 0.0, 0.0));\n        // Phi and theta are flipped depending on where you read about them.\n        float theta = atan(distance(vec2(0.0,0.0),point.xy),point.z);\n        // The distance from the source pixel to the center of the image\n        float r = (2.0/PI)*(theta/fovInput);\n        \n\n        // phi is the angle of r on the unit circle. See polar coordinates for more details\n        float phi = atan(-point.y, point.x);\n        // Get the position of the source pixel\n        vec2 sourcePixel;\n        sourcePixel.x = r * cos(phi);\n        sourcePixel.y = r * sin(phi);\n        // Normalize the output pixel to be in the range [0,1]\n        sourcePixel += 1.0;\n        sourcePixel /= 2.0;\n        // Don't bother with source pixels outside of the fisheye circle\n        if (1.0 < r || sourcePixel.x < 0.0 || sourcePixel.y < 0.0 || sourcePixel.x > 1.0 || sourcePixel.y > 1.0) {\n          // Return a isTransparent pixel\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return sourcePixel;\n      }\n      \n      bool outOfFlatBounds(vec2 xy, float lower, float upper)\n      {\n        vec2 lowerBound = vec2(lower, lower);\n        vec2 upperBound = vec2(upper, upper);\n        return (any(lessThan(xy, lowerBound)) || any(greaterThan(xy, upperBound)));\n      }\n\n\n      vec2 latLonToFlatUv(vec2 latLon, float fovInput)\n      {\n        vec3 point = rotatePoint(latLonToPoint(latLon), vec3(-PI/2.0, 0.0, 0.0));\n        latLon = pointToLatLon(point);\n        float aspectRatio = float(width)/float(height);\n\n        vec2 xyOnImagePlane;\n        vec3 p;\n        if (latLon.x < 0.0) \n        {\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        // Derive a 3D point on the plane which correlates with the latitude and longitude in the fisheye image.\n        p = flatLatLonToPoint(latLon);\n        p.x /= aspectRatio;\n        // Control the scale with the user's fov input parameter.\n        p.xy *= fovInput;\n        // Position of the source pixel in the source image in the range [-1,1]\n        xyOnImagePlane = p.xy / 2.0 + 0.5;\n        if (outOfFlatBounds(xyOnImagePlane, 0.0, 1.0)) \n    \t\t{\n          isTransparent = true;\n          return SET_TO_TRANSPARENT;\n        }\n        return xyOnImagePlane;\n      }\n\n    vec2 uvToLatLon(vec2 localUv)\n    {\n      // Given some pixel (uv), find the latitude and longitude of that pixel\n      vec2 latLon;\n      if (outputProjection == EQUI)\n        latLon = equiUvToLatLon(localUv);\n      else if(outputProjection == FISHEYE)\n      {\n        localUv.x = (localUv.x * float(width) / float(height)) - 0.5;\n        latLon = fisheyeUvToLatLon(localUv, fovOut);\n      }\n      else if (outputProjection == FLAT)\n        latLon = flatImageUvToLatLon(localUv, fovOut);\n      else if (outputProjection == CUBEMAP)\n        latLon = cubemapUvToLatLon(localUv);\n      return latLon;\n    }\n    vec3 uvToPoint(vec2 localUv)\n    {\n      return latLonToPoint(uvToLatLon(localUv));\n    }\n    // Courtesy Paul Bourke\n    // http://paulbourke.net/geometry/SolidAngle/\n    vec3 calcTangent(vec3 p0, vec3 p1)\n    {\n      vec3 p = p1 - p0;\n      vec3 r = cross(p0, p);\n      vec3 t = normalize(cross(r, p0));\n      return t;\n    }\n    \n\n    float solidAngleOfRectangle(vec3 c0, vec3 c1, vec3 c2, vec3 c3)\n    {\n      vec3 c0c1 = calcTangent(c0, c1);\n      vec3 c0c2 = calcTangent(c0, c2);\n      vec3 c1c0 = calcTangent(c1, c0);\n      vec3 c1c2 = calcTangent(c1, c2);\n      vec3 c2c0 = calcTangent(c2, c0);\n      vec3 c2c1 = calcTangent(c2, c1);\n      vec3 c0c3 = calcTangent(c0, c3);\n      vec3 c2c3 = calcTangent(c2, c3);\n      vec3 c3c0 = calcTangent(c3, c0);\n      vec3 c3c2 = calcTangent(c3, c2);\n      float theta0 = atan(length(cross(c0c2, c0c1)),dot(c0c2, c0c1)); \n      float theta1 = atan(length(cross(c1c0, c1c2)),dot(c1c0, c1c2));  \n      float theta2 = atan(length(cross(c2c1, c2c0)),dot(c2c1, c2c0));\n      float solidAngle0 = theta0 + theta1 + theta2 - PI; \n      float theta3 = atan(length(cross(c0c3, c0c2)),dot(c0c3, c0c2));  \n      float theta4 = atan(length(cross(c2c0, c2c3)),dot(c2c0, c2c3));  \n      float theta5 = atan(length(cross(c3c2, c3c0)),dot(c3c2, c3c0));\n      float solidAngle1 = theta3 + theta4 + theta5 - PI;\n      float solidAngle = solidAngle0 + solidAngle1;\n      return solidAngle;\n    }\n\n\n    float getSolidAngle(vec2 local_uv)\n    {\n      vec2 dimensions = vec2(float(width), float(height));\n      vec2 bottomLeft = uvToLatLon(local_uv + vec2(-0.5, -0.5) / dimensions);\n      vec2 topRight = uvToLatLon(local_uv + vec2(0.5, 0.5) / dimensions);\n      vec2 pixelUv = local_uv * dimensions;\n      vec3 c0 = uvToPoint((pixelUv + vec2(-1.0, -1.0)) / dimensions);\n      vec3 c1 = uvToPoint((pixelUv + vec2( 1.0, -1.0)) / dimensions);\n      vec3 c2 = uvToPoint((pixelUv + vec2( 1.0,  1.0)) / dimensions);\n      vec3 c3 = uvToPoint((pixelUv + vec2(-1.0,  1.0)) / dimensions);\n      float solidAngle = solidAngleOfRectangle(c0, c1, c2, c3);\n      // Remove outliers\n      float scalingFactor = 10000.0;\n      solidAngle *= scalingFactor;\n      return solidAngle;\n    }\n\n      void main()\n      {\n        // Display fisheye gridlines if they're turned on\n        if (gridLines == GRIDLINES_ON && outputProjection == FISHEYE)\n        {\n          vec2 gridlineUv = uv;\n          gridlineUv.x = (gridlineUv.x * float(width) / float(height)) - 0.5;\n          if (abs(distance(vec2(0.0, 0.0), 2.0 * gridlineUv - 1.0) - 1.0) < 0.01)\n          {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n            return;\n          }\n        }\n        vec3 InputRotation = vec3(pitch, roll, yaw);\n        vec4 fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        vec4 centerFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        float fovInput = fovIn;\n        float fovOutput = fovOut;\n        vec4 fishCorrect = vec4(correction1, correction2, correction3, correction4);\n        fishCorrect.xyzw -= 1.0;\n        float lineCount = 0.0;\n        // Level Of Detail: how fast should this run?\n        // Set LOD to 0 to run fast, set to 2 to blur the image, reducing jagged edges\n        const int LOD = 1;\n        //TODO Make Antialiasing a little smarter than this.\n        for(int i = -LOD; i <= LOD; i++)\n        {\n          for(int j = -LOD; j <= LOD; j++)\n          {\n            isTransparent = false;\n            vec2 uv_aa = uv + vec2(i, j)/vec2(width, height);\n\n            // Given some pixel (uv), find the latitude and longitude of that pixel\n            vec2 latLon;\n            // Create a point on the unit-sphere from the calculated latitude and longitude\n            // This sphere uses a right-handed coordinate system\n              // X increases from left to right [-1 to 1]\n              // Y increases from back to front [-1 to 1]\n              // Z increases from bottom to top [-1 to 1]\n            vec3 point;\n            if (outputProjection == EQUI)\n            {\n              latLon = equiUvToLatLon(uv_aa);\n              point = latLonToPoint(latLon);\n            }\n            else if(outputProjection == FISHEYE)\n            {\n              uv_aa.x = (uv_aa.x * float(width) / float(height)) - 0.5;\n              point = fisheyeUvToPoint(uv_aa, fovOutput);\n              // latLon = pointToLatLon(point);\n            }\n            else if (outputProjection == FLAT)\n            {\n              point = flatImageUvToPoint(uv_aa, fovOutput);\n              // latLon = pointToLatLon(point);\n            }\n            else if (outputProjection == CUBEMAP)\n            {\n              point = cubemapUvToPoint(uv_aa);\n              // latLon = pointToLatLon(point);\n            }\n            // If a pixel is out of bounds, set it to be transparent\n            if (isTransparent)\n            {\n              continue;\n            }\n            point = pointRadialCorrection(point);\n            // X, Y, Z translation inputs from the user.\n            vec3 translation = (vec3(x, y, z) - 1.0); \n            // Rotate the point based on the user input in radians\n            point.xyz += translation;\n            point = normalize(point);\n            point = rotatePoint(point, InputRotation.xyz * PI);\n            // if (distance(vec3(0.0, 0.0, 0.0), translation) > 1.0 && distance(vec3(0.0, 0.0, 0.0), point) > distance(vec3(0.0, 0.0, 0.0), translation))\n            // {\n            //   isTransparent = true;\n            //   continue;\n            // }\n            // Convert back to latitude and longitude\n            latLon = pointToLatLon(point);\n            // if (1.0 < distance(point, vec3(0.0, 0.0, 0.0)))\n            // {\n            //   // isTransparent == true;\n            //   gl_FragColor = vec4(latLon.x, latLon.y, 0.0, 1.0);\n            //   return;\n            // }\n            // Convert back to the normalized pixel coordinate\n            vec2 sourcePixel;\n            if (inputProjection == EQUI)\n              sourcePixel = latLonToEquiUv(latLon);\n            else if (inputProjection == FISHEYE)\n              sourcePixel = pointToFisheyeUv(point, fovInput, fishCorrect);\n            else if (inputProjection == FLAT)\n              sourcePixel = latLonToFlatUv(latLon, fovInput);\n\n            vec2 croppedUv = 2.0*sourcePixel-1.0;\n            float croppedWidth = cropRight - (cropLeft - 1.0);\n            float croppedHeight = cropTop - (cropBottom - 1.0);\n            // gl_FragColor = vec4(croppedWidth, 0.0, 0.0, 1.0);\n            // return;\n            croppedUv = vec2(croppedUv.x / cropRight, croppedUv.y / cropTop);\n            //float newWidth = float(width) / (croppedWidth + 1.0);\n            //float newHeight = float(newWidth) / float(height) ;\n            //croppedUv.y /= newHeight;\n            croppedUv = 0.5*croppedUv+0.5;\n            croppedUv.x += xCenter - 1.0;\n            croppedUv.y += yCenter - 1.0;\n            if (croppedUv.x < 0.0  || croppedUv.y < 0.0 || 1.0 < croppedUv.x || 1.0 < croppedUv.y)\n            {\n              continue;\n              // gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n              // return;\n            }\n            // If a pixel is out of bounds, set it to be transparent\n            else if (isTransparent)\n            {\n              continue;\n            }\n            if (solidAngle == 1)\n            {\n              gl_FragColor = vec4(getSolidAngle(croppedUv), 0.0, 0.0, 1.0);\n              return;\n            }\n            // Set the color of the destination pixel to the color of the source pixel\n            vec4 color = texture2D(InputTexture, croppedUv);\n\n            if (inputProjection == EQUI && gridLines == GRIDLINES_ON)\n            {\n              float minDistance = 0.3;\n              float lineThickness = minDistance;\n              for (float i = -18.0; i <= 18.0; i += 1.0)\n              {\n                float distanceToLine = abs(degrees(latLon.y) - i*10.0);\n                if (distanceToLine <= minDistance)\n                  minDistance = distanceToLine;\n                distanceToLine = abs(degrees(latLon.x) - i*10.0);\n                if (distanceToLine <= minDistance)\n                  minDistance = distanceToLine;\n              }\n              if (minDistance < lineThickness)\n              {\n                color = vec4(0.0, 0.0, 0.0, 1.0);\n                lineCount += 1.0;\n              }\n            }\n            fragColor += color;\n            if (i == 0 && j == 0)\n            {\n              // This is the aliased pixel. If we didn't do antialiasing this is the pixel we'd get.\n              centerFragColor = color;\n            }\n          }\n        }\n        // antiAliasCount: how many pixels the above loop should have calculated\n        float antiAliasCount = float((1+2*LOD)*(1+2*LOD));\n        // If the pixel has any transparency (i.e. the sourcePixel is at the perimeter of the image) then do antialiasing\n        if (fragColor.a < antiAliasCount || lineCount > 0.0)\n        {\n          // Apply antialiasing. Remove the if/else statement if you want to antialias the whole image.\n          gl_FragColor = fragColor / antiAliasCount;\n          \n        }\n        else\n        {\n          // Ignore antialiasing\n          gl_FragColor = centerFragColor;\n        }\n      }\n\n    `\n  }\n});\n\nclass ProjectionComponent extends Component {\n  render() {\n    const { pitch, roll, yaw, inputProjection, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter, outputProjection, gridLines, solidAngle, width, height, sourceImage, test } = this.props\n    return (\n      <Surface width={1400} height={700}>\n        <Node\n          shader={shaders.Reproject}\n          uniforms={{ pitch, roll, yaw, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter, inputProjection, outputProjection, gridLines, solidAngle, width:1400, height:700, InputTexture: sourceImage, test }}\n        />\n      </Surface>\n    )\n  }\n}\n\nexport default ProjectionComponent;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/lab/Slider';\nimport './App.css'\nimport ProjectionComponent from './ProjectionComponent'\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ImageUploader from 'react-images-upload';\n \nclass App extends Component {\n  state = {\n    pitch: 1,\n    roll: 1,\n    yaw: 1,\n    fovIn: 1,\n    fovOut: 1,\n    x: 1,\n    y: 1,\n    z: 1,\n    correction1: 0,\n    correction2: 0, \n    correction3: 0,\n    correction4: 0, \n    cropTop: 1,\n    cropBottom: 1,\n    cropLeft: 1,\n    cropRight: 1,\n    xCenter: 1,\n    yCenter: 1,\n    inputProjection: 0,\n    outputProjection: 2,\n    gridLines: 0,\n    solidAngle: 0,\n    pictures: [],\n    sourceImage: \"curiosity.png\", \n    name: \"\",\n    uploadedImage: \"\",\n    test: 1,\n    url: \"\",\n  }\n  handleChange = event => {\n    var value = event.target.value\n    // if (event.target.name == 'correction1') {\n    //   value = value - 1.0\n    // }\n    this.setState({ [event.target.name]: value });\n  };\n  handleUrlChange = event => {\n    this.setState({ url: event.target.value });\n  };\n  handlePitchChange = (event, value) => {\n    this.setState({ pitch: value/50 });\n  }\n\n  handleRollChange = (event, value) => {\n    this.setState({ roll: value/50 });\n  }\n\n  handleYawChange = (event, value) => {\n    this.setState({ yaw: value/50 });\n  }\n  handleFovInChange = (event, value) => {\n    this.setState({ fovIn: value/50 });\n  }\n\n  handleFovOutChange = (event, value) => {\n    this.setState({ fovOut: value/50 });\n  }\n  handleCorrection1Change = (event, value) => {\n    this.setState({ correction1: value/50 });\n  }\n  handleCorrection2Change = (event, value) => {\n    this.setState({ correction2: value/50 });\n  }\n  handleCorrection3Change = (event, value) => {\n    this.setState({ correction3: value/50 });\n  }\n  handleCorrection4Change = (event, value) => {\n    this.setState({ correction4: value/50 });\n  }\n  handleXChange = (event, value) => {\n    this.setState({ x: value/50 });\n  }\n  handleYChange = (event, value) => {\n    this.setState({ y: value/50 });\n  }\n  handleZChange = (event, value) => {\n    this.setState({ z: value/50 });\n  }\n  handleSliderChange = (event, value) => {\n    this.setState({ [event.target.name]: event.target.value/50 });\n  }\n  handleCropTopChange = (event, value) => {\n    this.setState({ cropTop: value/50,\n                    cropBottom: 2.0 - value/50 });\n  }\n  handleCropBottomChange = (event, value) => {\n    this.setState({ cropBottom: value/50,\n                    cropTop: 2.0 - value/50 });\n  }\n  handleCropLeftChange = (event, value) => {\n    this.setState({ cropLeft: value/50, \n                    cropRight: 2.0 - value/50});\n  }\n  handleCropRightChange = (event, value) => {\n    this.setState({ cropRight: value/50,\n                    cropLeft: 2.0 - value/50 });\n  }\n  handleXCenterChange = (event, value) => {\n    this.setState({ xCenter: value/50 });\n  }\n  handleYCenterChange = (event, value) => {\n    this.setState({ yCenter: value/50 });\n  }\n  handleTestChange = (event, value) => {\n    this.setState({ test: value/50 });\n  }\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.url);\n    event.preventDefault();\n  }\n  constructor(props) {\n      super(props);\n        this.onDrop = this.onDrop.bind(this);\n  }\n  onDrop(picture) {\n      this.setState({\n          pictures: picture,\n          uploadedImage: picture[picture.length-1].name,\n          sourceImage: picture[picture.length-1].name,\n          \n      });\n  }\n  render() {\n    const { pitch, roll, yaw, fovIn, fovOut, x, y, z, correction1, correction2, correction3, correction4, cropTop, cropBottom, cropLeft, cropRight, xCenter, yCenter, inputProjection, outputProjection, gridLines, solidAngle, sourceImage, url, test } = this.state\n    return (\n      <div className='App-container'>\n      <div className='App-slider'>\n      <TextField\n        id=\"outlined-name\"\n        label=\"URL\"\n        className={TextField}\n        value={this.state.url}\n        onChange={this.handleUrlChange}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n        {/*<div className='App-Options'>\n          <ImageUploader\n              withIcon={true}\n              buttonText='Choose image'\n              onChange={this.onDrop}\n              imgExtension={['.jpg', '.gif', '.png', '.gif']}\n              maxFileSize={5242880}\n              singleImage={true}\n              withPreview={false}\n          />\n        </div>*/}\n        <div className='App-Options'>\n          <p>Source Image</p>\n            <Select\n              value={this.state.sourceImage}\n              onChange={this.handleChange}\n              inputProps={{\n                name: 'sourceImage',\n                id: 'sourceImage',\n              }}\n            >\n              <MenuItem value={\"earth.jpg\"}>Earth</MenuItem>\n              <MenuItem value={\"test.jpg\"}>Rectilinear Photo</MenuItem>\n              <MenuItem value={\"radial.jpg\"}>Fisheye Grid</MenuItem>\n              <MenuItem value={\"yutu-pano2.png\"}>YuTu</MenuItem>\n              <MenuItem value={\"curiosity.png\"}>Curiosity</MenuItem>\n            </Select>\n        </div>\n        \n        <div className='App-Options'>\n          <p>Input Projection</p>\n          <Select\n            value={this.state.inputProjection}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'inputProjection',\n              id: 'inputProjection',\n            }}\n            displayEmpty\n          >\n            <MenuItem value={0}>Equirectangular</MenuItem>\n            <MenuItem value={1}>Fisheye</MenuItem>\n            <MenuItem value={2}>Rectilinear</MenuItem>\n          </Select>\n        </div>\n        \n        <div className='App-Options'>\n          <p>Output Projection</p>\n          <Select\n            value={this.state.outputProjection}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'outputProjection',\n              id: 'outputProjection',\n            }}\n          >\n            <MenuItem value={0}>Equirectangular</MenuItem>\n            <MenuItem value={1}>Fisheye</MenuItem>\n            <MenuItem value={2}>Rectilinear</MenuItem>\n            <MenuItem value={3}>CubeMap</MenuItem>\n          </Select>\n        \n        </div>\n        <div className='App-Options'>\n          <p>Grid Lines</p>\n          <Select\n            value={this.state.gridLines}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'gridLines',\n              id: 'gridLines',\n            }}\n          >\n            <MenuItem value={0}>Off</MenuItem>\n            <MenuItem value={1}>On</MenuItem>\n          </Select>\n        </div>\n        <div className='App-Options'>\n            <p>Pitch: {((this.state.pitch - 1.0) * 180.0).toFixed(1)} degrees</p>\n            <Slider\n              value={pitch*50}\n              onChange={this.handlePitchChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Roll: {((this.state.roll - 1.0) * 180.0).toFixed(1)} degrees</p>\n            <Slider\n              value={roll*50}\n              onChange={this.handleRollChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Yaw: {((this.state.yaw - 1.0) * 180.0).toFixed(1)} degrees</p>\n            <Slider\n              value={yaw*50}\n              onChange={this.handleYawChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Field of View In: {(180.0*this.state.fovIn).toFixed(1)} degrees</p>\n            <Slider\n              value={fovIn*50}\n              onChange={this.handleFovInChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Field of View Out: {(this.state.fovOut).toFixed(2)}</p>\n            <Slider\n              value={fovOut*50}\n              onChange={this.handleFovOutChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>X: {((this.state.x-1.0)*5.0).toFixed(1)} meters</p>\n            <Slider\n              value={x*50}\n              onChange={this.handleXChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Y: {((this.state.y-1.0)*5.0).toFixed(1)} meters</p>\n            <Slider\n              value={y*50}\n              onChange={this.handleYChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Z: {((this.state.z-1.0)*5.0).toFixed(1)} meters</p>\n            <Slider\n              value={z*50}\n              onChange={this.handleZChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Top: {((this.state.cropTop-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropTop*50}\n              onChange={this.handleCropTopChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Bottom: {((this.state.cropBottom-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropBottom*50}\n              onChange={this.handleCropBottomChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Left  {((this.state.cropLeft-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropLeft*50}\n              onChange={this.handleCropLeftChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Crop Right {((this.state.cropRight-1.0)*1400.0/4.0).toFixed(0)} pixels</p>\n            <Slider\n              value={cropRight*50}\n              onChange={this.handleCropRightChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>X Center : {((this.state.xCenter-1.0)*1400.0/2.0).toFixed(0)} pixels</p>\n            <Slider\n              value={xCenter*50}\n              onChange={this.handleXCenterChange}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Y Center : {((this.state.yCenter-1.0)*1400.0/2.0).toFixed(0)} pixels</p>\n            <Slider\n              value={yCenter*50}\n              onChange={this.handleYCenterChange}\n            />\n        </div>\n        <div className='App-Options'>\n            <p>Radial Correction 1</p>\n            <TextField\n              id=\"correction1-box\"\n              value={this.state.correction1}\n              onChange={this.handleChange}\n              type=\"number\"\n              inputProps={{\n                  name: 'correction1',\n                }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <Slider\n              value={correction1*50}\n              onChange={this.handleCorrection1Change}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Radial Correction 2</p>\n            <TextField\n              id=\"correction2-box\"\n              value={this.state.correction2}\n              onChange={this.handleChange}\n              type=\"number\"\n              inputProps={{\n                  name: 'correction2',\n                }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <Slider\n              value={correction2*50}\n              onChange={this.handleCorrection2Change}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Radial Correction 3</p>\n            <TextField\n              id=\"correction3-box\"\n              value={this.state.correction3}\n              onChange={this.handleChange}\n              type=\"number\"\n              inputProps={{\n                  name: 'correction3',\n                }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <Slider\n              value={correction3*50}\n              onChange={this.handleCorrection3Change}\n            />\n        </div>\n        \n        <div className='App-Options'>\n            <p>Radial Correction 4</p>\n            <TextField\n              id=\"correction4-box\"\n              value={this.state.correction4}\n              onChange={this.handleChange}\n              type=\"number\"\n              inputProps={{\n                  name: 'correction4',\n                }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <Slider\n              value={correction4*50}\n              onChange={this.handleCorrection4Change}\n            />\n        </div>\n        <div className='App-Options'>\n          <p>Solid Angle per Pixel</p>\n          <Select\n            value={this.state.solidAngle}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'solidAngle',\n              id: 'solidAngle',\n            }}\n          >\n            <MenuItem value={0}>Off</MenuItem>\n            <MenuItem value={1}>On</MenuItem>\n          </Select>\n        </div>\n        {/*<div className='App-Options'>\n            <p>Test: {this.state.test}</p>\n            <Slider\n              value={test*50}\n              onChange={this.handleTestChange}\n            />\n        </div>*/}\n        </div>\n        <div className='App-Projection'>\n          <ProjectionComponent pitch={pitch} roll={roll} yaw={yaw} fovIn={fovIn} fovOut={fovOut} x={x} y={y} z={z} xCenter={xCenter} yCenter={yCenter} correction1={correction1} correction2={correction2} correction3={correction3} correction4={correction4} cropTop={cropTop} cropBottom={cropBottom} cropLeft={cropLeft} cropRight={cropRight}  inputProjection={inputProjection} outputProjection={outputProjection} gridLines={gridLines} solidAngle={solidAngle} sourceImage={sourceImage} test={test}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}