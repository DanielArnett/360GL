{"version":3,"sources":["MapComponent.js","App.js","serviceWorker.js","index.js"],"names":["shaders","Shaders","create","Saturate","frag","GLSL","_templateObject","MapComponent","_this$props","this","props","contrast","saturation","brightness","react_default","a","createElement","gl_react_dom_lib","width","height","lib","shader","uniforms","InputTexture","Component","App","state","handleContrastChange","event","value","_this","setState","handleSaturationChange","handleBrightnessChange","_this$state","className","Slider_default","onChange","src_MapComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2jHAIA,IAAMA,EAAUC,UAAQC,OAAO,CAC7BC,SAAU,CACRC,KAAMC,eAAFC,QA8GOC,mLAbJ,IAAAC,EACsCC,KAAKC,MAA1CC,EADDH,EACCG,SAAUC,EADXJ,EACWI,WAAYC,EADvBL,EACuBK,WAC9B,OACEC,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASC,MAAO,KAAMC,OAAQ,KAC5BL,EAAAC,EAAAC,cAACI,EAAA,KAAD,CACEC,OAAQrB,EAAQG,SAChBmB,SAAU,CAAEX,WAAUC,aAAYC,aAAYU,aAAc,uBAP3CC,aCjDZC,6MA/CbC,MAAQ,CACNf,SAAU,EACVC,WAAY,EACZC,WAAY,KAGdc,qBAAuB,SAACC,EAAOC,GAC7BC,EAAKC,SAAS,CAAEpB,SAAUkB,EAAM,QAGlCG,uBAAyB,SAACJ,EAAOC,GAC/BC,EAAKC,SAAS,CAAEnB,WAAYiB,EAAM,QAGpCI,uBAAyB,SAACL,EAAOC,GAC/BC,EAAKC,SAAS,CAAElB,WAAYgB,EAAM,8EAG3B,IAAAK,EACsCzB,KAAKiB,MAA1Cf,EADDuB,EACCvB,SAAUC,EADXsB,EACWtB,WAAYC,EADvBqB,EACuBrB,WAC9B,OACEC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,iBACbrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cACbrB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEc,MAAgB,GAATlB,EACP0B,SAAU5B,KAAKkB,uBAEjBb,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEc,MAAkB,GAAXjB,EACPyB,SAAU5B,KAAKuB,yBAEjBlB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEc,MAAkB,GAAXhB,EACPwB,SAAU5B,KAAKwB,0BAGnBnB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,WACbrB,EAAAC,EAAAC,cAACsB,EAAD,CAAc3B,SAAUA,EAAUC,WAAYA,EAAYC,WAAYA,aAzC9DW,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9224ac5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Shaders, Node, GLSL } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\n\nconst shaders = Shaders.create({\n  Saturate: {\n    frag: GLSL`\n      precision highp float;\n      float PI = 3.14159265359;\n      uniform sampler2D InputTexture;\n      uniform float contrast, saturation, brightness;\n      varying vec2 uv;\n      // uniform vec3 InputRotation;\n      // A transformation matrix rotating about the x axis by th degrees.\n      mat3 Rx(float th)\n      {\n          return mat3(1, 0, 0,\n                      0, cos(th), -sin(th),\n                      0, sin(th), cos(th));\n      }\n      // A transformation matrix rotating about the y axis by th degrees.\n      mat3 Ry(float th)\n      {\n          return mat3(cos(th), 0, sin(th),\n                         0,    1,    0,\n                      -sin(th), 0, cos(th));\n      }\n      // A transformation matrix rotating about the z axis by th degrees.\n      mat3 Rz(float th)\n      {\n          return mat3(cos(th), -sin(th), 0,\n                      sin(th),  cos(th), 0,\n                        0,         0   , 1);\n      }\n\n      // Rotate a point vector by th.x then th.y then th.z, and return the rotated point.\n      vec3 rotatePoint(vec3 p, vec3 th)\n      {\n          return Rx(th.r) * Ry(th.g) * Rz(th.b) * p;\n      }\n\n      // Convert x, y pixel coordinates from an Equirectangular image into latitude/longitude coordinates.\n      vec2 uvToLatLon(vec2 uv)\n      {\n          return vec2(uv.y * PI - PI/2.0,\n                      uv.x * 2.0*PI - PI);\n      }\n\n      // Convert latitude, longitude into a 3d point on the unit-sphere.\n      vec3 latLonToPoint(vec2 latLon)\n      {\n          vec3 point;\n          point.x = cos(latLon.x) * sin(latLon.y);\n          point.y = sin(latLon.x);\n          point.z = cos(latLon.x) * cos(latLon.y);\n          return point;\n      }\n\n      // Convert a 3D point on the unit sphere into latitude and longitude.\n      vec2 pointToLatLon(vec3 point)\n      {\n          vec2 latLon;\n          latLon.x = asin(point.y);\n          latLon.y = atan(point.x, point.z);\n          return latLon;\n      }\n\n      // Convert latitude, longitude to x, y pixel coordinates on an equirectangular image.\n      vec2 latLonToUv(vec2 latLon)\n      {\n          vec2 uv;\n          uv.x = (latLon.y + PI)/(2.0*PI);\n          uv.y = (latLon.x + PI/2.0)/PI;\n          return uv;\n      }\n\n      void main()\n      {\n          vec3 InputRotation = vec3(contrast, saturation, brightness);\n          // vec2 uv = gl_TexCoord[0].xy;\n          // Latitude and Longitude of the destination pixel (uv)\n          vec2 latLon = uvToLatLon(uv);\n          // Create a point on the unit-sphere from the latitude and longitude\n              // X increases from left to right [-1 to 1]\n              // Y increases from bottom to top [-1 to 1]\n              // Z increases from back to front [-1 to 1]\n          vec3 point = latLonToPoint(latLon);\n          // Rotate the point based on the user input in radians\n          point = rotatePoint(point, InputRotation.rgb * PI);\n          // Convert back to latitude and longitude\n          latLon = pointToLatLon(point);\n          // Convert back to the normalized pixel coordinate\n          vec2 sourcePixel = latLonToUv(latLon);\n          // Set the color of the destination pixel to the color of the source pixel\n\n          gl_FragColor = texture2D(InputTexture, sourcePixel);\n      }\n\n    `\n  }\n});\n\nclass MapComponent extends Component {\n  render() {\n    const { contrast, saturation, brightness } = this.props\n    return (\n      <Surface width={1200} height={600}>\n        <Node\n          shader={shaders.Saturate}\n          uniforms={{ contrast, saturation, brightness, InputTexture: 'earth.jpg' }}\n        />\n      </Surface>\n    )\n  }\n}\n\nexport default MapComponent;\n","import React, { Component } from 'react';\nimport Slider from '@material-ui/lab/Slider';\nimport './App.css'\nimport MapComponent from './MapComponent'\n\nclass App extends Component {\n  state = {\n    contrast: 1,\n    saturation: 1,\n    brightness: 1,\n  }\n\n  handleContrastChange = (event, value) => {\n    this.setState({ contrast: value/50 });\n  }\n\n  handleSaturationChange = (event, value) => {\n    this.setState({ saturation: value/50 });\n  }\n\n  handleBrightnessChange = (event, value) => {\n    this.setState({ brightness: value/50 });\n  }\n\n  render() {\n    const { contrast, saturation, brightness } = this.state\n    return (\n      <div className='App-container'>\n        <div className='App-slider'>\n          <p>Contrast</p>\n          <Slider\n            value={contrast*50}\n            onChange={this.handleContrastChange}\n          />\n          <p>Saturation</p>\n          <Slider\n            value={saturation*50}\n            onChange={this.handleSaturationChange}\n          />\n          <p>Brightness</p>\n          <Slider\n            value={brightness*50}\n            onChange={this.handleBrightnessChange}\n          />\n        </div>\n        <div className='App-map'>\n          <MapComponent contrast={contrast} saturation={saturation} brightness={brightness}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}